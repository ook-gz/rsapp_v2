
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model habitaciones
 * 
 */
export type habitaciones = {
  id_hab: number
  num_hab: number | null
  tipo_hab: tipo_hab | null
}

/**
 * Model huespedes
 * 
 */
export type huespedes = {
  id_huesped: number
  nm_huesped: string
  ap_pat: string
  ap_mat: string | null
  fecha_llegada: Date
  num_acomp: number | null
  correo: string
  id_hab: number
  passwrd: string | null
  id_rol: number | null
}

/**
 * Model incidencias
 * 
 */
export type incidencias = {
  id_incidencia: number
  descripcion: string | null
  asunto: asunto | null
}

/**
 * Model items
 * 
 */
export type items = {
  id_item: number
  nm_item: string | null
  cantidad_exist: number | null
}

/**
 * Model pedidos
 * 
 */
export type pedidos = {
  id_pedido: number
  estado: estado | null
  tipo_pedido: tipo_pedido | null
}

/**
 * Model personal
 * 
 */
export type personal = {
  id_personal: number
  nm_prsnl: string | null
  ap_pat: string | null
  ap_mat: string | null
  id_rol: number | null
}

/**
 * Model roles
 * 
 */
export type roles = {
  id_rol: number
  rol: rol | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const tipo_hab: {
  individual: 'individual',
  familiar: 'familiar',
  matrimonial: 'matrimonial'
};

export type tipo_hab = (typeof tipo_hab)[keyof typeof tipo_hab]


export const asunto: {
  personal: 'personal',
  instalaciones: 'instalaciones'
};

export type asunto = (typeof asunto)[keyof typeof asunto]


export const estado: {
  entregado: 'entregado',
  en_proceso: 'en_proceso',
  recibido: 'recibido'
};

export type estado = (typeof estado)[keyof typeof estado]


export const tipo_pedido: {
  items: 'items',
  limpieza: 'limpieza'
};

export type tipo_pedido = (typeof tipo_pedido)[keyof typeof tipo_pedido]


export const rol: {
  huesped: 'huesped',
  hotelAdmin: 'hotelAdmin',
  superAdmin: 'superAdmin'
};

export type rol = (typeof rol)[keyof typeof rol]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Habitaciones
 * const habitaciones = await prisma.habitaciones.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Habitaciones
   * const habitaciones = await prisma.habitaciones.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.habitaciones`: Exposes CRUD operations for the **habitaciones** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habitaciones
    * const habitaciones = await prisma.habitaciones.findMany()
    * ```
    */
  get habitaciones(): Prisma.habitacionesDelegate<GlobalReject>;

  /**
   * `prisma.huespedes`: Exposes CRUD operations for the **huespedes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Huespedes
    * const huespedes = await prisma.huespedes.findMany()
    * ```
    */
  get huespedes(): Prisma.huespedesDelegate<GlobalReject>;

  /**
   * `prisma.incidencias`: Exposes CRUD operations for the **incidencias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Incidencias
    * const incidencias = await prisma.incidencias.findMany()
    * ```
    */
  get incidencias(): Prisma.incidenciasDelegate<GlobalReject>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.itemsDelegate<GlobalReject>;

  /**
   * `prisma.pedidos`: Exposes CRUD operations for the **pedidos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pedidos
    * const pedidos = await prisma.pedidos.findMany()
    * ```
    */
  get pedidos(): Prisma.pedidosDelegate<GlobalReject>;

  /**
   * `prisma.personal`: Exposes CRUD operations for the **personal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personals
    * const personals = await prisma.personal.findMany()
    * ```
    */
  get personal(): Prisma.personalDelegate<GlobalReject>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.rolesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    habitaciones: 'habitaciones',
    huespedes: 'huespedes',
    incidencias: 'incidencias',
    items: 'items',
    pedidos: 'pedidos',
    personal: 'personal',
    roles: 'roles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HabitacionesCountOutputType
   */


  export type HabitacionesCountOutputType = {
    huespedes: number
  }

  export type HabitacionesCountOutputTypeSelect = {
    huespedes?: boolean
  }

  export type HabitacionesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | HabitacionesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? HabitacionesCountOutputType
    : S extends undefined
    ? never
    : S extends HabitacionesCountOutputTypeArgs
    ?'include' extends U
    ? HabitacionesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof HabitacionesCountOutputType ? HabitacionesCountOutputType[P] : never
  } 
    : HabitacionesCountOutputType
  : HabitacionesCountOutputType




  // Custom InputTypes

  /**
   * HabitacionesCountOutputType without action
   */
  export type HabitacionesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HabitacionesCountOutputType
     * 
    **/
    select?: HabitacionesCountOutputTypeSelect | null
  }



  /**
   * Count Type RolesCountOutputType
   */


  export type RolesCountOutputType = {
    huespedes: number
    personal: number
  }

  export type RolesCountOutputTypeSelect = {
    huespedes?: boolean
    personal?: boolean
  }

  export type RolesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RolesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RolesCountOutputType
    : S extends undefined
    ? never
    : S extends RolesCountOutputTypeArgs
    ?'include' extends U
    ? RolesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RolesCountOutputType ? RolesCountOutputType[P] : never
  } 
    : RolesCountOutputType
  : RolesCountOutputType




  // Custom InputTypes

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     * 
    **/
    select?: RolesCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model habitaciones
   */


  export type AggregateHabitaciones = {
    _count: HabitacionesCountAggregateOutputType | null
    _avg: HabitacionesAvgAggregateOutputType | null
    _sum: HabitacionesSumAggregateOutputType | null
    _min: HabitacionesMinAggregateOutputType | null
    _max: HabitacionesMaxAggregateOutputType | null
  }

  export type HabitacionesAvgAggregateOutputType = {
    id_hab: number | null
    num_hab: number | null
  }

  export type HabitacionesSumAggregateOutputType = {
    id_hab: number | null
    num_hab: number | null
  }

  export type HabitacionesMinAggregateOutputType = {
    id_hab: number | null
    num_hab: number | null
    tipo_hab: tipo_hab | null
  }

  export type HabitacionesMaxAggregateOutputType = {
    id_hab: number | null
    num_hab: number | null
    tipo_hab: tipo_hab | null
  }

  export type HabitacionesCountAggregateOutputType = {
    id_hab: number
    num_hab: number
    tipo_hab: number
    _all: number
  }


  export type HabitacionesAvgAggregateInputType = {
    id_hab?: true
    num_hab?: true
  }

  export type HabitacionesSumAggregateInputType = {
    id_hab?: true
    num_hab?: true
  }

  export type HabitacionesMinAggregateInputType = {
    id_hab?: true
    num_hab?: true
    tipo_hab?: true
  }

  export type HabitacionesMaxAggregateInputType = {
    id_hab?: true
    num_hab?: true
    tipo_hab?: true
  }

  export type HabitacionesCountAggregateInputType = {
    id_hab?: true
    num_hab?: true
    tipo_hab?: true
    _all?: true
  }

  export type HabitacionesAggregateArgs = {
    /**
     * Filter which habitaciones to aggregate.
     * 
    **/
    where?: habitacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habitaciones to fetch.
     * 
    **/
    orderBy?: Enumerable<habitacionesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: habitacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habitaciones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habitaciones.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned habitaciones
    **/
    _count?: true | HabitacionesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HabitacionesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HabitacionesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabitacionesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabitacionesMaxAggregateInputType
  }

  export type GetHabitacionesAggregateType<T extends HabitacionesAggregateArgs> = {
        [P in keyof T & keyof AggregateHabitaciones]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabitaciones[P]>
      : GetScalarType<T[P], AggregateHabitaciones[P]>
  }




  export type HabitacionesGroupByArgs = {
    where?: habitacionesWhereInput
    orderBy?: Enumerable<habitacionesOrderByWithAggregationInput>
    by: Array<HabitacionesScalarFieldEnum>
    having?: habitacionesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabitacionesCountAggregateInputType | true
    _avg?: HabitacionesAvgAggregateInputType
    _sum?: HabitacionesSumAggregateInputType
    _min?: HabitacionesMinAggregateInputType
    _max?: HabitacionesMaxAggregateInputType
  }


  export type HabitacionesGroupByOutputType = {
    id_hab: number
    num_hab: number | null
    tipo_hab: tipo_hab | null
    _count: HabitacionesCountAggregateOutputType | null
    _avg: HabitacionesAvgAggregateOutputType | null
    _sum: HabitacionesSumAggregateOutputType | null
    _min: HabitacionesMinAggregateOutputType | null
    _max: HabitacionesMaxAggregateOutputType | null
  }

  type GetHabitacionesGroupByPayload<T extends HabitacionesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<HabitacionesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabitacionesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabitacionesGroupByOutputType[P]>
            : GetScalarType<T[P], HabitacionesGroupByOutputType[P]>
        }
      >
    >


  export type habitacionesSelect = {
    id_hab?: boolean
    num_hab?: boolean
    tipo_hab?: boolean
    huespedes?: boolean | huespedesFindManyArgs
    _count?: boolean | HabitacionesCountOutputTypeArgs
  }

  export type habitacionesInclude = {
    huespedes?: boolean | huespedesFindManyArgs
    _count?: boolean | HabitacionesCountOutputTypeArgs
  }

  export type habitacionesGetPayload<
    S extends boolean | null | undefined | habitacionesArgs,
    U = keyof S
      > = S extends true
        ? habitaciones
    : S extends undefined
    ? never
    : S extends habitacionesArgs | habitacionesFindManyArgs
    ?'include' extends U
    ? habitaciones  & {
    [P in TrueKeys<S['include']>]:
        P extends 'huespedes' ? Array < huespedesGetPayload<S['include'][P]>>  :
        P extends '_count' ? HabitacionesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'huespedes' ? Array < huespedesGetPayload<S['select'][P]>>  :
        P extends '_count' ? HabitacionesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof habitaciones ? habitaciones[P] : never
  } 
    : habitaciones
  : habitaciones


  type habitacionesCountArgs = Merge<
    Omit<habitacionesFindManyArgs, 'select' | 'include'> & {
      select?: HabitacionesCountAggregateInputType | true
    }
  >

  export interface habitacionesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Habitaciones that matches the filter.
     * @param {habitacionesFindUniqueArgs} args - Arguments to find a Habitaciones
     * @example
     * // Get one Habitaciones
     * const habitaciones = await prisma.habitaciones.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends habitacionesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, habitacionesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'habitaciones'> extends True ? CheckSelect<T, Prisma__habitacionesClient<habitaciones>, Prisma__habitacionesClient<habitacionesGetPayload<T>>> : CheckSelect<T, Prisma__habitacionesClient<habitaciones | null >, Prisma__habitacionesClient<habitacionesGetPayload<T> | null >>

    /**
     * Find the first Habitaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionesFindFirstArgs} args - Arguments to find a Habitaciones
     * @example
     * // Get one Habitaciones
     * const habitaciones = await prisma.habitaciones.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends habitacionesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, habitacionesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'habitaciones'> extends True ? CheckSelect<T, Prisma__habitacionesClient<habitaciones>, Prisma__habitacionesClient<habitacionesGetPayload<T>>> : CheckSelect<T, Prisma__habitacionesClient<habitaciones | null >, Prisma__habitacionesClient<habitacionesGetPayload<T> | null >>

    /**
     * Find zero or more Habitaciones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habitaciones
     * const habitaciones = await prisma.habitaciones.findMany()
     * 
     * // Get first 10 Habitaciones
     * const habitaciones = await prisma.habitaciones.findMany({ take: 10 })
     * 
     * // Only select the `id_hab`
     * const habitacionesWithId_habOnly = await prisma.habitaciones.findMany({ select: { id_hab: true } })
     * 
    **/
    findMany<T extends habitacionesFindManyArgs>(
      args?: SelectSubset<T, habitacionesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<habitaciones>>, PrismaPromise<Array<habitacionesGetPayload<T>>>>

    /**
     * Create a Habitaciones.
     * @param {habitacionesCreateArgs} args - Arguments to create a Habitaciones.
     * @example
     * // Create one Habitaciones
     * const Habitaciones = await prisma.habitaciones.create({
     *   data: {
     *     // ... data to create a Habitaciones
     *   }
     * })
     * 
    **/
    create<T extends habitacionesCreateArgs>(
      args: SelectSubset<T, habitacionesCreateArgs>
    ): CheckSelect<T, Prisma__habitacionesClient<habitaciones>, Prisma__habitacionesClient<habitacionesGetPayload<T>>>

    /**
     * Create many Habitaciones.
     *     @param {habitacionesCreateManyArgs} args - Arguments to create many Habitaciones.
     *     @example
     *     // Create many Habitaciones
     *     const habitaciones = await prisma.habitaciones.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends habitacionesCreateManyArgs>(
      args?: SelectSubset<T, habitacionesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Habitaciones.
     * @param {habitacionesDeleteArgs} args - Arguments to delete one Habitaciones.
     * @example
     * // Delete one Habitaciones
     * const Habitaciones = await prisma.habitaciones.delete({
     *   where: {
     *     // ... filter to delete one Habitaciones
     *   }
     * })
     * 
    **/
    delete<T extends habitacionesDeleteArgs>(
      args: SelectSubset<T, habitacionesDeleteArgs>
    ): CheckSelect<T, Prisma__habitacionesClient<habitaciones>, Prisma__habitacionesClient<habitacionesGetPayload<T>>>

    /**
     * Update one Habitaciones.
     * @param {habitacionesUpdateArgs} args - Arguments to update one Habitaciones.
     * @example
     * // Update one Habitaciones
     * const habitaciones = await prisma.habitaciones.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends habitacionesUpdateArgs>(
      args: SelectSubset<T, habitacionesUpdateArgs>
    ): CheckSelect<T, Prisma__habitacionesClient<habitaciones>, Prisma__habitacionesClient<habitacionesGetPayload<T>>>

    /**
     * Delete zero or more Habitaciones.
     * @param {habitacionesDeleteManyArgs} args - Arguments to filter Habitaciones to delete.
     * @example
     * // Delete a few Habitaciones
     * const { count } = await prisma.habitaciones.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends habitacionesDeleteManyArgs>(
      args?: SelectSubset<T, habitacionesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habitaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habitaciones
     * const habitaciones = await prisma.habitaciones.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends habitacionesUpdateManyArgs>(
      args: SelectSubset<T, habitacionesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Habitaciones.
     * @param {habitacionesUpsertArgs} args - Arguments to update or create a Habitaciones.
     * @example
     * // Update or create a Habitaciones
     * const habitaciones = await prisma.habitaciones.upsert({
     *   create: {
     *     // ... data to create a Habitaciones
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habitaciones we want to update
     *   }
     * })
    **/
    upsert<T extends habitacionesUpsertArgs>(
      args: SelectSubset<T, habitacionesUpsertArgs>
    ): CheckSelect<T, Prisma__habitacionesClient<habitaciones>, Prisma__habitacionesClient<habitacionesGetPayload<T>>>

    /**
     * Count the number of Habitaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {habitacionesCountArgs} args - Arguments to filter Habitaciones to count.
     * @example
     * // Count the number of Habitaciones
     * const count = await prisma.habitaciones.count({
     *   where: {
     *     // ... the filter for the Habitaciones we want to count
     *   }
     * })
    **/
    count<T extends habitacionesCountArgs>(
      args?: Subset<T, habitacionesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabitacionesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habitaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitacionesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabitacionesAggregateArgs>(args: Subset<T, HabitacionesAggregateArgs>): PrismaPromise<GetHabitacionesAggregateType<T>>

    /**
     * Group by Habitaciones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitacionesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HabitacionesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HabitacionesGroupByArgs['orderBy'] }
        : { orderBy?: HabitacionesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HabitacionesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabitacionesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for habitaciones.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__habitacionesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    huespedes<T extends huespedesFindManyArgs = {}>(args?: Subset<T, huespedesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<huespedes>>, PrismaPromise<Array<huespedesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * habitaciones findUnique
   */
  export type habitacionesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
    /**
     * Throw an Error if a habitaciones can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which habitaciones to fetch.
     * 
    **/
    where: habitacionesWhereUniqueInput
  }


  /**
   * habitaciones findFirst
   */
  export type habitacionesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
    /**
     * Throw an Error if a habitaciones can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which habitaciones to fetch.
     * 
    **/
    where?: habitacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habitaciones to fetch.
     * 
    **/
    orderBy?: Enumerable<habitacionesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for habitaciones.
     * 
    **/
    cursor?: habitacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habitaciones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habitaciones.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of habitaciones.
     * 
    **/
    distinct?: Enumerable<HabitacionesScalarFieldEnum>
  }


  /**
   * habitaciones findMany
   */
  export type habitacionesFindManyArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
    /**
     * Filter, which habitaciones to fetch.
     * 
    **/
    where?: habitacionesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of habitaciones to fetch.
     * 
    **/
    orderBy?: Enumerable<habitacionesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing habitaciones.
     * 
    **/
    cursor?: habitacionesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` habitaciones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` habitaciones.
     * 
    **/
    skip?: number
    distinct?: Enumerable<HabitacionesScalarFieldEnum>
  }


  /**
   * habitaciones create
   */
  export type habitacionesCreateArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
    /**
     * The data needed to create a habitaciones.
     * 
    **/
    data: XOR<habitacionesCreateInput, habitacionesUncheckedCreateInput>
  }


  /**
   * habitaciones createMany
   */
  export type habitacionesCreateManyArgs = {
    /**
     * The data used to create many habitaciones.
     * 
    **/
    data: Enumerable<habitacionesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * habitaciones update
   */
  export type habitacionesUpdateArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
    /**
     * The data needed to update a habitaciones.
     * 
    **/
    data: XOR<habitacionesUpdateInput, habitacionesUncheckedUpdateInput>
    /**
     * Choose, which habitaciones to update.
     * 
    **/
    where: habitacionesWhereUniqueInput
  }


  /**
   * habitaciones updateMany
   */
  export type habitacionesUpdateManyArgs = {
    /**
     * The data used to update habitaciones.
     * 
    **/
    data: XOR<habitacionesUpdateManyMutationInput, habitacionesUncheckedUpdateManyInput>
    /**
     * Filter which habitaciones to update
     * 
    **/
    where?: habitacionesWhereInput
  }


  /**
   * habitaciones upsert
   */
  export type habitacionesUpsertArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
    /**
     * The filter to search for the habitaciones to update in case it exists.
     * 
    **/
    where: habitacionesWhereUniqueInput
    /**
     * In case the habitaciones found by the `where` argument doesn't exist, create a new habitaciones with this data.
     * 
    **/
    create: XOR<habitacionesCreateInput, habitacionesUncheckedCreateInput>
    /**
     * In case the habitaciones was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<habitacionesUpdateInput, habitacionesUncheckedUpdateInput>
  }


  /**
   * habitaciones delete
   */
  export type habitacionesDeleteArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
    /**
     * Filter which habitaciones to delete.
     * 
    **/
    where: habitacionesWhereUniqueInput
  }


  /**
   * habitaciones deleteMany
   */
  export type habitacionesDeleteManyArgs = {
    /**
     * Filter which habitaciones to delete
     * 
    **/
    where?: habitacionesWhereInput
  }


  /**
   * habitaciones without action
   */
  export type habitacionesArgs = {
    /**
     * Select specific fields to fetch from the habitaciones
     * 
    **/
    select?: habitacionesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: habitacionesInclude | null
  }



  /**
   * Model huespedes
   */


  export type AggregateHuespedes = {
    _count: HuespedesCountAggregateOutputType | null
    _avg: HuespedesAvgAggregateOutputType | null
    _sum: HuespedesSumAggregateOutputType | null
    _min: HuespedesMinAggregateOutputType | null
    _max: HuespedesMaxAggregateOutputType | null
  }

  export type HuespedesAvgAggregateOutputType = {
    id_huesped: number | null
    num_acomp: number | null
    id_hab: number | null
    id_rol: number | null
  }

  export type HuespedesSumAggregateOutputType = {
    id_huesped: number | null
    num_acomp: number | null
    id_hab: number | null
    id_rol: number | null
  }

  export type HuespedesMinAggregateOutputType = {
    id_huesped: number | null
    nm_huesped: string | null
    ap_pat: string | null
    ap_mat: string | null
    fecha_llegada: Date | null
    num_acomp: number | null
    correo: string | null
    id_hab: number | null
    passwrd: string | null
    id_rol: number | null
  }

  export type HuespedesMaxAggregateOutputType = {
    id_huesped: number | null
    nm_huesped: string | null
    ap_pat: string | null
    ap_mat: string | null
    fecha_llegada: Date | null
    num_acomp: number | null
    correo: string | null
    id_hab: number | null
    passwrd: string | null
    id_rol: number | null
  }

  export type HuespedesCountAggregateOutputType = {
    id_huesped: number
    nm_huesped: number
    ap_pat: number
    ap_mat: number
    fecha_llegada: number
    num_acomp: number
    correo: number
    id_hab: number
    passwrd: number
    id_rol: number
    _all: number
  }


  export type HuespedesAvgAggregateInputType = {
    id_huesped?: true
    num_acomp?: true
    id_hab?: true
    id_rol?: true
  }

  export type HuespedesSumAggregateInputType = {
    id_huesped?: true
    num_acomp?: true
    id_hab?: true
    id_rol?: true
  }

  export type HuespedesMinAggregateInputType = {
    id_huesped?: true
    nm_huesped?: true
    ap_pat?: true
    ap_mat?: true
    fecha_llegada?: true
    num_acomp?: true
    correo?: true
    id_hab?: true
    passwrd?: true
    id_rol?: true
  }

  export type HuespedesMaxAggregateInputType = {
    id_huesped?: true
    nm_huesped?: true
    ap_pat?: true
    ap_mat?: true
    fecha_llegada?: true
    num_acomp?: true
    correo?: true
    id_hab?: true
    passwrd?: true
    id_rol?: true
  }

  export type HuespedesCountAggregateInputType = {
    id_huesped?: true
    nm_huesped?: true
    ap_pat?: true
    ap_mat?: true
    fecha_llegada?: true
    num_acomp?: true
    correo?: true
    id_hab?: true
    passwrd?: true
    id_rol?: true
    _all?: true
  }

  export type HuespedesAggregateArgs = {
    /**
     * Filter which huespedes to aggregate.
     * 
    **/
    where?: huespedesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of huespedes to fetch.
     * 
    **/
    orderBy?: Enumerable<huespedesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: huespedesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` huespedes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` huespedes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned huespedes
    **/
    _count?: true | HuespedesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HuespedesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HuespedesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HuespedesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HuespedesMaxAggregateInputType
  }

  export type GetHuespedesAggregateType<T extends HuespedesAggregateArgs> = {
        [P in keyof T & keyof AggregateHuespedes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHuespedes[P]>
      : GetScalarType<T[P], AggregateHuespedes[P]>
  }




  export type HuespedesGroupByArgs = {
    where?: huespedesWhereInput
    orderBy?: Enumerable<huespedesOrderByWithAggregationInput>
    by: Array<HuespedesScalarFieldEnum>
    having?: huespedesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HuespedesCountAggregateInputType | true
    _avg?: HuespedesAvgAggregateInputType
    _sum?: HuespedesSumAggregateInputType
    _min?: HuespedesMinAggregateInputType
    _max?: HuespedesMaxAggregateInputType
  }


  export type HuespedesGroupByOutputType = {
    id_huesped: number
    nm_huesped: string
    ap_pat: string
    ap_mat: string | null
    fecha_llegada: Date
    num_acomp: number | null
    correo: string
    id_hab: number
    passwrd: string | null
    id_rol: number | null
    _count: HuespedesCountAggregateOutputType | null
    _avg: HuespedesAvgAggregateOutputType | null
    _sum: HuespedesSumAggregateOutputType | null
    _min: HuespedesMinAggregateOutputType | null
    _max: HuespedesMaxAggregateOutputType | null
  }

  type GetHuespedesGroupByPayload<T extends HuespedesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<HuespedesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HuespedesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HuespedesGroupByOutputType[P]>
            : GetScalarType<T[P], HuespedesGroupByOutputType[P]>
        }
      >
    >


  export type huespedesSelect = {
    id_huesped?: boolean
    nm_huesped?: boolean
    ap_pat?: boolean
    ap_mat?: boolean
    fecha_llegada?: boolean
    num_acomp?: boolean
    correo?: boolean
    id_hab?: boolean
    passwrd?: boolean
    id_rol?: boolean
    habitaciones?: boolean | habitacionesArgs
    roles?: boolean | rolesArgs
  }

  export type huespedesInclude = {
    habitaciones?: boolean | habitacionesArgs
    roles?: boolean | rolesArgs
  }

  export type huespedesGetPayload<
    S extends boolean | null | undefined | huespedesArgs,
    U = keyof S
      > = S extends true
        ? huespedes
    : S extends undefined
    ? never
    : S extends huespedesArgs | huespedesFindManyArgs
    ?'include' extends U
    ? huespedes  & {
    [P in TrueKeys<S['include']>]:
        P extends 'habitaciones' ? habitacionesGetPayload<S['include'][P]> :
        P extends 'roles' ? rolesGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'habitaciones' ? habitacionesGetPayload<S['select'][P]> :
        P extends 'roles' ? rolesGetPayload<S['select'][P]> | null :  P extends keyof huespedes ? huespedes[P] : never
  } 
    : huespedes
  : huespedes


  type huespedesCountArgs = Merge<
    Omit<huespedesFindManyArgs, 'select' | 'include'> & {
      select?: HuespedesCountAggregateInputType | true
    }
  >

  export interface huespedesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Huespedes that matches the filter.
     * @param {huespedesFindUniqueArgs} args - Arguments to find a Huespedes
     * @example
     * // Get one Huespedes
     * const huespedes = await prisma.huespedes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends huespedesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, huespedesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'huespedes'> extends True ? CheckSelect<T, Prisma__huespedesClient<huespedes>, Prisma__huespedesClient<huespedesGetPayload<T>>> : CheckSelect<T, Prisma__huespedesClient<huespedes | null >, Prisma__huespedesClient<huespedesGetPayload<T> | null >>

    /**
     * Find the first Huespedes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {huespedesFindFirstArgs} args - Arguments to find a Huespedes
     * @example
     * // Get one Huespedes
     * const huespedes = await prisma.huespedes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends huespedesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, huespedesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'huespedes'> extends True ? CheckSelect<T, Prisma__huespedesClient<huespedes>, Prisma__huespedesClient<huespedesGetPayload<T>>> : CheckSelect<T, Prisma__huespedesClient<huespedes | null >, Prisma__huespedesClient<huespedesGetPayload<T> | null >>

    /**
     * Find zero or more Huespedes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {huespedesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Huespedes
     * const huespedes = await prisma.huespedes.findMany()
     * 
     * // Get first 10 Huespedes
     * const huespedes = await prisma.huespedes.findMany({ take: 10 })
     * 
     * // Only select the `id_huesped`
     * const huespedesWithId_huespedOnly = await prisma.huespedes.findMany({ select: { id_huesped: true } })
     * 
    **/
    findMany<T extends huespedesFindManyArgs>(
      args?: SelectSubset<T, huespedesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<huespedes>>, PrismaPromise<Array<huespedesGetPayload<T>>>>

    /**
     * Create a Huespedes.
     * @param {huespedesCreateArgs} args - Arguments to create a Huespedes.
     * @example
     * // Create one Huespedes
     * const Huespedes = await prisma.huespedes.create({
     *   data: {
     *     // ... data to create a Huespedes
     *   }
     * })
     * 
    **/
    create<T extends huespedesCreateArgs>(
      args: SelectSubset<T, huespedesCreateArgs>
    ): CheckSelect<T, Prisma__huespedesClient<huespedes>, Prisma__huespedesClient<huespedesGetPayload<T>>>

    /**
     * Create many Huespedes.
     *     @param {huespedesCreateManyArgs} args - Arguments to create many Huespedes.
     *     @example
     *     // Create many Huespedes
     *     const huespedes = await prisma.huespedes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends huespedesCreateManyArgs>(
      args?: SelectSubset<T, huespedesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Huespedes.
     * @param {huespedesDeleteArgs} args - Arguments to delete one Huespedes.
     * @example
     * // Delete one Huespedes
     * const Huespedes = await prisma.huespedes.delete({
     *   where: {
     *     // ... filter to delete one Huespedes
     *   }
     * })
     * 
    **/
    delete<T extends huespedesDeleteArgs>(
      args: SelectSubset<T, huespedesDeleteArgs>
    ): CheckSelect<T, Prisma__huespedesClient<huespedes>, Prisma__huespedesClient<huespedesGetPayload<T>>>

    /**
     * Update one Huespedes.
     * @param {huespedesUpdateArgs} args - Arguments to update one Huespedes.
     * @example
     * // Update one Huespedes
     * const huespedes = await prisma.huespedes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends huespedesUpdateArgs>(
      args: SelectSubset<T, huespedesUpdateArgs>
    ): CheckSelect<T, Prisma__huespedesClient<huespedes>, Prisma__huespedesClient<huespedesGetPayload<T>>>

    /**
     * Delete zero or more Huespedes.
     * @param {huespedesDeleteManyArgs} args - Arguments to filter Huespedes to delete.
     * @example
     * // Delete a few Huespedes
     * const { count } = await prisma.huespedes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends huespedesDeleteManyArgs>(
      args?: SelectSubset<T, huespedesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Huespedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {huespedesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Huespedes
     * const huespedes = await prisma.huespedes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends huespedesUpdateManyArgs>(
      args: SelectSubset<T, huespedesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Huespedes.
     * @param {huespedesUpsertArgs} args - Arguments to update or create a Huespedes.
     * @example
     * // Update or create a Huespedes
     * const huespedes = await prisma.huespedes.upsert({
     *   create: {
     *     // ... data to create a Huespedes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Huespedes we want to update
     *   }
     * })
    **/
    upsert<T extends huespedesUpsertArgs>(
      args: SelectSubset<T, huespedesUpsertArgs>
    ): CheckSelect<T, Prisma__huespedesClient<huespedes>, Prisma__huespedesClient<huespedesGetPayload<T>>>

    /**
     * Count the number of Huespedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {huespedesCountArgs} args - Arguments to filter Huespedes to count.
     * @example
     * // Count the number of Huespedes
     * const count = await prisma.huespedes.count({
     *   where: {
     *     // ... the filter for the Huespedes we want to count
     *   }
     * })
    **/
    count<T extends huespedesCountArgs>(
      args?: Subset<T, huespedesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HuespedesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Huespedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HuespedesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HuespedesAggregateArgs>(args: Subset<T, HuespedesAggregateArgs>): PrismaPromise<GetHuespedesAggregateType<T>>

    /**
     * Group by Huespedes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HuespedesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HuespedesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HuespedesGroupByArgs['orderBy'] }
        : { orderBy?: HuespedesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HuespedesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHuespedesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for huespedes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__huespedesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    habitaciones<T extends habitacionesArgs = {}>(args?: Subset<T, habitacionesArgs>): CheckSelect<T, Prisma__habitacionesClient<habitaciones | null >, Prisma__habitacionesClient<habitacionesGetPayload<T> | null >>;

    roles<T extends rolesArgs = {}>(args?: Subset<T, rolesArgs>): CheckSelect<T, Prisma__rolesClient<roles | null >, Prisma__rolesClient<rolesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * huespedes findUnique
   */
  export type huespedesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
    /**
     * Throw an Error if a huespedes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which huespedes to fetch.
     * 
    **/
    where: huespedesWhereUniqueInput
  }


  /**
   * huespedes findFirst
   */
  export type huespedesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
    /**
     * Throw an Error if a huespedes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which huespedes to fetch.
     * 
    **/
    where?: huespedesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of huespedes to fetch.
     * 
    **/
    orderBy?: Enumerable<huespedesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for huespedes.
     * 
    **/
    cursor?: huespedesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` huespedes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` huespedes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of huespedes.
     * 
    **/
    distinct?: Enumerable<HuespedesScalarFieldEnum>
  }


  /**
   * huespedes findMany
   */
  export type huespedesFindManyArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
    /**
     * Filter, which huespedes to fetch.
     * 
    **/
    where?: huespedesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of huespedes to fetch.
     * 
    **/
    orderBy?: Enumerable<huespedesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing huespedes.
     * 
    **/
    cursor?: huespedesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` huespedes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` huespedes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<HuespedesScalarFieldEnum>
  }


  /**
   * huespedes create
   */
  export type huespedesCreateArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
    /**
     * The data needed to create a huespedes.
     * 
    **/
    data: XOR<huespedesCreateInput, huespedesUncheckedCreateInput>
  }


  /**
   * huespedes createMany
   */
  export type huespedesCreateManyArgs = {
    /**
     * The data used to create many huespedes.
     * 
    **/
    data: Enumerable<huespedesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * huespedes update
   */
  export type huespedesUpdateArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
    /**
     * The data needed to update a huespedes.
     * 
    **/
    data: XOR<huespedesUpdateInput, huespedesUncheckedUpdateInput>
    /**
     * Choose, which huespedes to update.
     * 
    **/
    where: huespedesWhereUniqueInput
  }


  /**
   * huespedes updateMany
   */
  export type huespedesUpdateManyArgs = {
    /**
     * The data used to update huespedes.
     * 
    **/
    data: XOR<huespedesUpdateManyMutationInput, huespedesUncheckedUpdateManyInput>
    /**
     * Filter which huespedes to update
     * 
    **/
    where?: huespedesWhereInput
  }


  /**
   * huespedes upsert
   */
  export type huespedesUpsertArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
    /**
     * The filter to search for the huespedes to update in case it exists.
     * 
    **/
    where: huespedesWhereUniqueInput
    /**
     * In case the huespedes found by the `where` argument doesn't exist, create a new huespedes with this data.
     * 
    **/
    create: XOR<huespedesCreateInput, huespedesUncheckedCreateInput>
    /**
     * In case the huespedes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<huespedesUpdateInput, huespedesUncheckedUpdateInput>
  }


  /**
   * huespedes delete
   */
  export type huespedesDeleteArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
    /**
     * Filter which huespedes to delete.
     * 
    **/
    where: huespedesWhereUniqueInput
  }


  /**
   * huespedes deleteMany
   */
  export type huespedesDeleteManyArgs = {
    /**
     * Filter which huespedes to delete
     * 
    **/
    where?: huespedesWhereInput
  }


  /**
   * huespedes without action
   */
  export type huespedesArgs = {
    /**
     * Select specific fields to fetch from the huespedes
     * 
    **/
    select?: huespedesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: huespedesInclude | null
  }



  /**
   * Model incidencias
   */


  export type AggregateIncidencias = {
    _count: IncidenciasCountAggregateOutputType | null
    _avg: IncidenciasAvgAggregateOutputType | null
    _sum: IncidenciasSumAggregateOutputType | null
    _min: IncidenciasMinAggregateOutputType | null
    _max: IncidenciasMaxAggregateOutputType | null
  }

  export type IncidenciasAvgAggregateOutputType = {
    id_incidencia: number | null
  }

  export type IncidenciasSumAggregateOutputType = {
    id_incidencia: number | null
  }

  export type IncidenciasMinAggregateOutputType = {
    id_incidencia: number | null
    descripcion: string | null
    asunto: asunto | null
  }

  export type IncidenciasMaxAggregateOutputType = {
    id_incidencia: number | null
    descripcion: string | null
    asunto: asunto | null
  }

  export type IncidenciasCountAggregateOutputType = {
    id_incidencia: number
    descripcion: number
    asunto: number
    _all: number
  }


  export type IncidenciasAvgAggregateInputType = {
    id_incidencia?: true
  }

  export type IncidenciasSumAggregateInputType = {
    id_incidencia?: true
  }

  export type IncidenciasMinAggregateInputType = {
    id_incidencia?: true
    descripcion?: true
    asunto?: true
  }

  export type IncidenciasMaxAggregateInputType = {
    id_incidencia?: true
    descripcion?: true
    asunto?: true
  }

  export type IncidenciasCountAggregateInputType = {
    id_incidencia?: true
    descripcion?: true
    asunto?: true
    _all?: true
  }

  export type IncidenciasAggregateArgs = {
    /**
     * Filter which incidencias to aggregate.
     * 
    **/
    where?: incidenciasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incidencias to fetch.
     * 
    **/
    orderBy?: Enumerable<incidenciasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: incidenciasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incidencias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incidencias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned incidencias
    **/
    _count?: true | IncidenciasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IncidenciasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IncidenciasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IncidenciasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IncidenciasMaxAggregateInputType
  }

  export type GetIncidenciasAggregateType<T extends IncidenciasAggregateArgs> = {
        [P in keyof T & keyof AggregateIncidencias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncidencias[P]>
      : GetScalarType<T[P], AggregateIncidencias[P]>
  }




  export type IncidenciasGroupByArgs = {
    where?: incidenciasWhereInput
    orderBy?: Enumerable<incidenciasOrderByWithAggregationInput>
    by: Array<IncidenciasScalarFieldEnum>
    having?: incidenciasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IncidenciasCountAggregateInputType | true
    _avg?: IncidenciasAvgAggregateInputType
    _sum?: IncidenciasSumAggregateInputType
    _min?: IncidenciasMinAggregateInputType
    _max?: IncidenciasMaxAggregateInputType
  }


  export type IncidenciasGroupByOutputType = {
    id_incidencia: number
    descripcion: string | null
    asunto: asunto | null
    _count: IncidenciasCountAggregateOutputType | null
    _avg: IncidenciasAvgAggregateOutputType | null
    _sum: IncidenciasSumAggregateOutputType | null
    _min: IncidenciasMinAggregateOutputType | null
    _max: IncidenciasMaxAggregateOutputType | null
  }

  type GetIncidenciasGroupByPayload<T extends IncidenciasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IncidenciasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IncidenciasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IncidenciasGroupByOutputType[P]>
            : GetScalarType<T[P], IncidenciasGroupByOutputType[P]>
        }
      >
    >


  export type incidenciasSelect = {
    id_incidencia?: boolean
    descripcion?: boolean
    asunto?: boolean
  }

  export type incidenciasGetPayload<
    S extends boolean | null | undefined | incidenciasArgs,
    U = keyof S
      > = S extends true
        ? incidencias
    : S extends undefined
    ? never
    : S extends incidenciasArgs | incidenciasFindManyArgs
    ?'include' extends U
    ? incidencias 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof incidencias ? incidencias[P] : never
  } 
    : incidencias
  : incidencias


  type incidenciasCountArgs = Merge<
    Omit<incidenciasFindManyArgs, 'select' | 'include'> & {
      select?: IncidenciasCountAggregateInputType | true
    }
  >

  export interface incidenciasDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Incidencias that matches the filter.
     * @param {incidenciasFindUniqueArgs} args - Arguments to find a Incidencias
     * @example
     * // Get one Incidencias
     * const incidencias = await prisma.incidencias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends incidenciasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, incidenciasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'incidencias'> extends True ? CheckSelect<T, Prisma__incidenciasClient<incidencias>, Prisma__incidenciasClient<incidenciasGetPayload<T>>> : CheckSelect<T, Prisma__incidenciasClient<incidencias | null >, Prisma__incidenciasClient<incidenciasGetPayload<T> | null >>

    /**
     * Find the first Incidencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incidenciasFindFirstArgs} args - Arguments to find a Incidencias
     * @example
     * // Get one Incidencias
     * const incidencias = await prisma.incidencias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends incidenciasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, incidenciasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'incidencias'> extends True ? CheckSelect<T, Prisma__incidenciasClient<incidencias>, Prisma__incidenciasClient<incidenciasGetPayload<T>>> : CheckSelect<T, Prisma__incidenciasClient<incidencias | null >, Prisma__incidenciasClient<incidenciasGetPayload<T> | null >>

    /**
     * Find zero or more Incidencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incidenciasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Incidencias
     * const incidencias = await prisma.incidencias.findMany()
     * 
     * // Get first 10 Incidencias
     * const incidencias = await prisma.incidencias.findMany({ take: 10 })
     * 
     * // Only select the `id_incidencia`
     * const incidenciasWithId_incidenciaOnly = await prisma.incidencias.findMany({ select: { id_incidencia: true } })
     * 
    **/
    findMany<T extends incidenciasFindManyArgs>(
      args?: SelectSubset<T, incidenciasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<incidencias>>, PrismaPromise<Array<incidenciasGetPayload<T>>>>

    /**
     * Create a Incidencias.
     * @param {incidenciasCreateArgs} args - Arguments to create a Incidencias.
     * @example
     * // Create one Incidencias
     * const Incidencias = await prisma.incidencias.create({
     *   data: {
     *     // ... data to create a Incidencias
     *   }
     * })
     * 
    **/
    create<T extends incidenciasCreateArgs>(
      args: SelectSubset<T, incidenciasCreateArgs>
    ): CheckSelect<T, Prisma__incidenciasClient<incidencias>, Prisma__incidenciasClient<incidenciasGetPayload<T>>>

    /**
     * Create many Incidencias.
     *     @param {incidenciasCreateManyArgs} args - Arguments to create many Incidencias.
     *     @example
     *     // Create many Incidencias
     *     const incidencias = await prisma.incidencias.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends incidenciasCreateManyArgs>(
      args?: SelectSubset<T, incidenciasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Incidencias.
     * @param {incidenciasDeleteArgs} args - Arguments to delete one Incidencias.
     * @example
     * // Delete one Incidencias
     * const Incidencias = await prisma.incidencias.delete({
     *   where: {
     *     // ... filter to delete one Incidencias
     *   }
     * })
     * 
    **/
    delete<T extends incidenciasDeleteArgs>(
      args: SelectSubset<T, incidenciasDeleteArgs>
    ): CheckSelect<T, Prisma__incidenciasClient<incidencias>, Prisma__incidenciasClient<incidenciasGetPayload<T>>>

    /**
     * Update one Incidencias.
     * @param {incidenciasUpdateArgs} args - Arguments to update one Incidencias.
     * @example
     * // Update one Incidencias
     * const incidencias = await prisma.incidencias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends incidenciasUpdateArgs>(
      args: SelectSubset<T, incidenciasUpdateArgs>
    ): CheckSelect<T, Prisma__incidenciasClient<incidencias>, Prisma__incidenciasClient<incidenciasGetPayload<T>>>

    /**
     * Delete zero or more Incidencias.
     * @param {incidenciasDeleteManyArgs} args - Arguments to filter Incidencias to delete.
     * @example
     * // Delete a few Incidencias
     * const { count } = await prisma.incidencias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends incidenciasDeleteManyArgs>(
      args?: SelectSubset<T, incidenciasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Incidencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incidenciasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Incidencias
     * const incidencias = await prisma.incidencias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends incidenciasUpdateManyArgs>(
      args: SelectSubset<T, incidenciasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Incidencias.
     * @param {incidenciasUpsertArgs} args - Arguments to update or create a Incidencias.
     * @example
     * // Update or create a Incidencias
     * const incidencias = await prisma.incidencias.upsert({
     *   create: {
     *     // ... data to create a Incidencias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Incidencias we want to update
     *   }
     * })
    **/
    upsert<T extends incidenciasUpsertArgs>(
      args: SelectSubset<T, incidenciasUpsertArgs>
    ): CheckSelect<T, Prisma__incidenciasClient<incidencias>, Prisma__incidenciasClient<incidenciasGetPayload<T>>>

    /**
     * Count the number of Incidencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {incidenciasCountArgs} args - Arguments to filter Incidencias to count.
     * @example
     * // Count the number of Incidencias
     * const count = await prisma.incidencias.count({
     *   where: {
     *     // ... the filter for the Incidencias we want to count
     *   }
     * })
    **/
    count<T extends incidenciasCountArgs>(
      args?: Subset<T, incidenciasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IncidenciasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Incidencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidenciasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IncidenciasAggregateArgs>(args: Subset<T, IncidenciasAggregateArgs>): PrismaPromise<GetIncidenciasAggregateType<T>>

    /**
     * Group by Incidencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncidenciasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IncidenciasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IncidenciasGroupByArgs['orderBy'] }
        : { orderBy?: IncidenciasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IncidenciasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncidenciasGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for incidencias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__incidenciasClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * incidencias findUnique
   */
  export type incidenciasFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
    /**
     * Throw an Error if a incidencias can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which incidencias to fetch.
     * 
    **/
    where: incidenciasWhereUniqueInput
  }


  /**
   * incidencias findFirst
   */
  export type incidenciasFindFirstArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
    /**
     * Throw an Error if a incidencias can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which incidencias to fetch.
     * 
    **/
    where?: incidenciasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incidencias to fetch.
     * 
    **/
    orderBy?: Enumerable<incidenciasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for incidencias.
     * 
    **/
    cursor?: incidenciasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incidencias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incidencias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of incidencias.
     * 
    **/
    distinct?: Enumerable<IncidenciasScalarFieldEnum>
  }


  /**
   * incidencias findMany
   */
  export type incidenciasFindManyArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
    /**
     * Filter, which incidencias to fetch.
     * 
    **/
    where?: incidenciasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of incidencias to fetch.
     * 
    **/
    orderBy?: Enumerable<incidenciasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing incidencias.
     * 
    **/
    cursor?: incidenciasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` incidencias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` incidencias.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IncidenciasScalarFieldEnum>
  }


  /**
   * incidencias create
   */
  export type incidenciasCreateArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
    /**
     * The data needed to create a incidencias.
     * 
    **/
    data: XOR<incidenciasCreateInput, incidenciasUncheckedCreateInput>
  }


  /**
   * incidencias createMany
   */
  export type incidenciasCreateManyArgs = {
    /**
     * The data used to create many incidencias.
     * 
    **/
    data: Enumerable<incidenciasCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * incidencias update
   */
  export type incidenciasUpdateArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
    /**
     * The data needed to update a incidencias.
     * 
    **/
    data: XOR<incidenciasUpdateInput, incidenciasUncheckedUpdateInput>
    /**
     * Choose, which incidencias to update.
     * 
    **/
    where: incidenciasWhereUniqueInput
  }


  /**
   * incidencias updateMany
   */
  export type incidenciasUpdateManyArgs = {
    /**
     * The data used to update incidencias.
     * 
    **/
    data: XOR<incidenciasUpdateManyMutationInput, incidenciasUncheckedUpdateManyInput>
    /**
     * Filter which incidencias to update
     * 
    **/
    where?: incidenciasWhereInput
  }


  /**
   * incidencias upsert
   */
  export type incidenciasUpsertArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
    /**
     * The filter to search for the incidencias to update in case it exists.
     * 
    **/
    where: incidenciasWhereUniqueInput
    /**
     * In case the incidencias found by the `where` argument doesn't exist, create a new incidencias with this data.
     * 
    **/
    create: XOR<incidenciasCreateInput, incidenciasUncheckedCreateInput>
    /**
     * In case the incidencias was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<incidenciasUpdateInput, incidenciasUncheckedUpdateInput>
  }


  /**
   * incidencias delete
   */
  export type incidenciasDeleteArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
    /**
     * Filter which incidencias to delete.
     * 
    **/
    where: incidenciasWhereUniqueInput
  }


  /**
   * incidencias deleteMany
   */
  export type incidenciasDeleteManyArgs = {
    /**
     * Filter which incidencias to delete
     * 
    **/
    where?: incidenciasWhereInput
  }


  /**
   * incidencias without action
   */
  export type incidenciasArgs = {
    /**
     * Select specific fields to fetch from the incidencias
     * 
    **/
    select?: incidenciasSelect | null
  }



  /**
   * Model items
   */


  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsAvgAggregateOutputType = {
    id_item: number | null
    cantidad_exist: number | null
  }

  export type ItemsSumAggregateOutputType = {
    id_item: number | null
    cantidad_exist: number | null
  }

  export type ItemsMinAggregateOutputType = {
    id_item: number | null
    nm_item: string | null
    cantidad_exist: number | null
  }

  export type ItemsMaxAggregateOutputType = {
    id_item: number | null
    nm_item: string | null
    cantidad_exist: number | null
  }

  export type ItemsCountAggregateOutputType = {
    id_item: number
    nm_item: number
    cantidad_exist: number
    _all: number
  }


  export type ItemsAvgAggregateInputType = {
    id_item?: true
    cantidad_exist?: true
  }

  export type ItemsSumAggregateInputType = {
    id_item?: true
    cantidad_exist?: true
  }

  export type ItemsMinAggregateInputType = {
    id_item?: true
    nm_item?: true
    cantidad_exist?: true
  }

  export type ItemsMaxAggregateInputType = {
    id_item?: true
    nm_item?: true
    cantidad_exist?: true
  }

  export type ItemsCountAggregateInputType = {
    id_item?: true
    nm_item?: true
    cantidad_exist?: true
    _all?: true
  }

  export type ItemsAggregateArgs = {
    /**
     * Filter which items to aggregate.
     * 
    **/
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }




  export type ItemsGroupByArgs = {
    where?: itemsWhereInput
    orderBy?: Enumerable<itemsOrderByWithAggregationInput>
    by: Array<ItemsScalarFieldEnum>
    having?: itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _avg?: ItemsAvgAggregateInputType
    _sum?: ItemsSumAggregateInputType
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }


  export type ItemsGroupByOutputType = {
    id_item: number
    nm_item: string | null
    cantidad_exist: number | null
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends ItemsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      >
    >


  export type itemsSelect = {
    id_item?: boolean
    nm_item?: boolean
    cantidad_exist?: boolean
  }

  export type itemsGetPayload<
    S extends boolean | null | undefined | itemsArgs,
    U = keyof S
      > = S extends true
        ? items
    : S extends undefined
    ? never
    : S extends itemsArgs | itemsFindManyArgs
    ?'include' extends U
    ? items 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof items ? items[P] : never
  } 
    : items
  : items


  type itemsCountArgs = Merge<
    Omit<itemsFindManyArgs, 'select' | 'include'> & {
      select?: ItemsCountAggregateInputType | true
    }
  >

  export interface itemsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Items that matches the filter.
     * @param {itemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itemsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, itemsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'items'> extends True ? CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>> : CheckSelect<T, Prisma__itemsClient<items | null >, Prisma__itemsClient<itemsGetPayload<T> | null >>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itemsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, itemsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'items'> extends True ? CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>> : CheckSelect<T, Prisma__itemsClient<items | null >, Prisma__itemsClient<itemsGetPayload<T> | null >>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `id_item`
     * const itemsWithId_itemOnly = await prisma.items.findMany({ select: { id_item: true } })
     * 
    **/
    findMany<T extends itemsFindManyArgs>(
      args?: SelectSubset<T, itemsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<items>>, PrismaPromise<Array<itemsGetPayload<T>>>>

    /**
     * Create a Items.
     * @param {itemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
    **/
    create<T extends itemsCreateArgs>(
      args: SelectSubset<T, itemsCreateArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Create many Items.
     *     @param {itemsCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const items = await prisma.items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itemsCreateManyArgs>(
      args?: SelectSubset<T, itemsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Items.
     * @param {itemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
    **/
    delete<T extends itemsDeleteArgs>(
      args: SelectSubset<T, itemsDeleteArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Update one Items.
     * @param {itemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itemsUpdateArgs>(
      args: SelectSubset<T, itemsUpdateArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Delete zero or more Items.
     * @param {itemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itemsDeleteManyArgs>(
      args?: SelectSubset<T, itemsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itemsUpdateManyArgs>(
      args: SelectSubset<T, itemsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Items.
     * @param {itemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
    **/
    upsert<T extends itemsUpsertArgs>(
      args: SelectSubset<T, itemsUpsertArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends itemsCountArgs>(
      args?: Subset<T, itemsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsGroupByArgs['orderBy'] }
        : { orderBy?: ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itemsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * items findUnique
   */
  export type itemsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Throw an Error if a items can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which items to fetch.
     * 
    **/
    where: itemsWhereUniqueInput
  }


  /**
   * items findFirst
   */
  export type itemsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Throw an Error if a items can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which items to fetch.
     * 
    **/
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     * 
    **/
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     * 
    **/
    distinct?: Enumerable<ItemsScalarFieldEnum>
  }


  /**
   * items findMany
   */
  export type itemsFindManyArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Filter, which items to fetch.
     * 
    **/
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing items.
     * 
    **/
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ItemsScalarFieldEnum>
  }


  /**
   * items create
   */
  export type itemsCreateArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * The data needed to create a items.
     * 
    **/
    data: XOR<itemsCreateInput, itemsUncheckedCreateInput>
  }


  /**
   * items createMany
   */
  export type itemsCreateManyArgs = {
    /**
     * The data used to create many items.
     * 
    **/
    data: Enumerable<itemsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * items update
   */
  export type itemsUpdateArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * The data needed to update a items.
     * 
    **/
    data: XOR<itemsUpdateInput, itemsUncheckedUpdateInput>
    /**
     * Choose, which items to update.
     * 
    **/
    where: itemsWhereUniqueInput
  }


  /**
   * items updateMany
   */
  export type itemsUpdateManyArgs = {
    /**
     * The data used to update items.
     * 
    **/
    data: XOR<itemsUpdateManyMutationInput, itemsUncheckedUpdateManyInput>
    /**
     * Filter which items to update
     * 
    **/
    where?: itemsWhereInput
  }


  /**
   * items upsert
   */
  export type itemsUpsertArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * The filter to search for the items to update in case it exists.
     * 
    **/
    where: itemsWhereUniqueInput
    /**
     * In case the items found by the `where` argument doesn't exist, create a new items with this data.
     * 
    **/
    create: XOR<itemsCreateInput, itemsUncheckedCreateInput>
    /**
     * In case the items was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<itemsUpdateInput, itemsUncheckedUpdateInput>
  }


  /**
   * items delete
   */
  export type itemsDeleteArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Filter which items to delete.
     * 
    **/
    where: itemsWhereUniqueInput
  }


  /**
   * items deleteMany
   */
  export type itemsDeleteManyArgs = {
    /**
     * Filter which items to delete
     * 
    **/
    where?: itemsWhereInput
  }


  /**
   * items without action
   */
  export type itemsArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
  }



  /**
   * Model pedidos
   */


  export type AggregatePedidos = {
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  export type PedidosAvgAggregateOutputType = {
    id_pedido: number | null
  }

  export type PedidosSumAggregateOutputType = {
    id_pedido: number | null
  }

  export type PedidosMinAggregateOutputType = {
    id_pedido: number | null
    estado: estado | null
    tipo_pedido: tipo_pedido | null
  }

  export type PedidosMaxAggregateOutputType = {
    id_pedido: number | null
    estado: estado | null
    tipo_pedido: tipo_pedido | null
  }

  export type PedidosCountAggregateOutputType = {
    id_pedido: number
    estado: number
    tipo_pedido: number
    _all: number
  }


  export type PedidosAvgAggregateInputType = {
    id_pedido?: true
  }

  export type PedidosSumAggregateInputType = {
    id_pedido?: true
  }

  export type PedidosMinAggregateInputType = {
    id_pedido?: true
    estado?: true
    tipo_pedido?: true
  }

  export type PedidosMaxAggregateInputType = {
    id_pedido?: true
    estado?: true
    tipo_pedido?: true
  }

  export type PedidosCountAggregateInputType = {
    id_pedido?: true
    estado?: true
    tipo_pedido?: true
    _all?: true
  }

  export type PedidosAggregateArgs = {
    /**
     * Filter which pedidos to aggregate.
     * 
    **/
    where?: pedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<pedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: pedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pedidos
    **/
    _count?: true | PedidosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PedidosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PedidosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PedidosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PedidosMaxAggregateInputType
  }

  export type GetPedidosAggregateType<T extends PedidosAggregateArgs> = {
        [P in keyof T & keyof AggregatePedidos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePedidos[P]>
      : GetScalarType<T[P], AggregatePedidos[P]>
  }




  export type PedidosGroupByArgs = {
    where?: pedidosWhereInput
    orderBy?: Enumerable<pedidosOrderByWithAggregationInput>
    by: Array<PedidosScalarFieldEnum>
    having?: pedidosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PedidosCountAggregateInputType | true
    _avg?: PedidosAvgAggregateInputType
    _sum?: PedidosSumAggregateInputType
    _min?: PedidosMinAggregateInputType
    _max?: PedidosMaxAggregateInputType
  }


  export type PedidosGroupByOutputType = {
    id_pedido: number
    estado: estado | null
    tipo_pedido: tipo_pedido | null
    _count: PedidosCountAggregateOutputType | null
    _avg: PedidosAvgAggregateOutputType | null
    _sum: PedidosSumAggregateOutputType | null
    _min: PedidosMinAggregateOutputType | null
    _max: PedidosMaxAggregateOutputType | null
  }

  type GetPedidosGroupByPayload<T extends PedidosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PedidosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PedidosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PedidosGroupByOutputType[P]>
            : GetScalarType<T[P], PedidosGroupByOutputType[P]>
        }
      >
    >


  export type pedidosSelect = {
    id_pedido?: boolean
    estado?: boolean
    tipo_pedido?: boolean
  }

  export type pedidosGetPayload<
    S extends boolean | null | undefined | pedidosArgs,
    U = keyof S
      > = S extends true
        ? pedidos
    : S extends undefined
    ? never
    : S extends pedidosArgs | pedidosFindManyArgs
    ?'include' extends U
    ? pedidos 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof pedidos ? pedidos[P] : never
  } 
    : pedidos
  : pedidos


  type pedidosCountArgs = Merge<
    Omit<pedidosFindManyArgs, 'select' | 'include'> & {
      select?: PedidosCountAggregateInputType | true
    }
  >

  export interface pedidosDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Pedidos that matches the filter.
     * @param {pedidosFindUniqueArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends pedidosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, pedidosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'pedidos'> extends True ? CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>> : CheckSelect<T, Prisma__pedidosClient<pedidos | null >, Prisma__pedidosClient<pedidosGetPayload<T> | null >>

    /**
     * Find the first Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosFindFirstArgs} args - Arguments to find a Pedidos
     * @example
     * // Get one Pedidos
     * const pedidos = await prisma.pedidos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends pedidosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, pedidosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'pedidos'> extends True ? CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>> : CheckSelect<T, Prisma__pedidosClient<pedidos | null >, Prisma__pedidosClient<pedidosGetPayload<T> | null >>

    /**
     * Find zero or more Pedidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pedidos
     * const pedidos = await prisma.pedidos.findMany()
     * 
     * // Get first 10 Pedidos
     * const pedidos = await prisma.pedidos.findMany({ take: 10 })
     * 
     * // Only select the `id_pedido`
     * const pedidosWithId_pedidoOnly = await prisma.pedidos.findMany({ select: { id_pedido: true } })
     * 
    **/
    findMany<T extends pedidosFindManyArgs>(
      args?: SelectSubset<T, pedidosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<pedidos>>, PrismaPromise<Array<pedidosGetPayload<T>>>>

    /**
     * Create a Pedidos.
     * @param {pedidosCreateArgs} args - Arguments to create a Pedidos.
     * @example
     * // Create one Pedidos
     * const Pedidos = await prisma.pedidos.create({
     *   data: {
     *     // ... data to create a Pedidos
     *   }
     * })
     * 
    **/
    create<T extends pedidosCreateArgs>(
      args: SelectSubset<T, pedidosCreateArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Create many Pedidos.
     *     @param {pedidosCreateManyArgs} args - Arguments to create many Pedidos.
     *     @example
     *     // Create many Pedidos
     *     const pedidos = await prisma.pedidos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends pedidosCreateManyArgs>(
      args?: SelectSubset<T, pedidosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pedidos.
     * @param {pedidosDeleteArgs} args - Arguments to delete one Pedidos.
     * @example
     * // Delete one Pedidos
     * const Pedidos = await prisma.pedidos.delete({
     *   where: {
     *     // ... filter to delete one Pedidos
     *   }
     * })
     * 
    **/
    delete<T extends pedidosDeleteArgs>(
      args: SelectSubset<T, pedidosDeleteArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Update one Pedidos.
     * @param {pedidosUpdateArgs} args - Arguments to update one Pedidos.
     * @example
     * // Update one Pedidos
     * const pedidos = await prisma.pedidos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pedidosUpdateArgs>(
      args: SelectSubset<T, pedidosUpdateArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Delete zero or more Pedidos.
     * @param {pedidosDeleteManyArgs} args - Arguments to filter Pedidos to delete.
     * @example
     * // Delete a few Pedidos
     * const { count } = await prisma.pedidos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pedidosDeleteManyArgs>(
      args?: SelectSubset<T, pedidosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pedidos
     * const pedidos = await prisma.pedidos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pedidosUpdateManyArgs>(
      args: SelectSubset<T, pedidosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pedidos.
     * @param {pedidosUpsertArgs} args - Arguments to update or create a Pedidos.
     * @example
     * // Update or create a Pedidos
     * const pedidos = await prisma.pedidos.upsert({
     *   create: {
     *     // ... data to create a Pedidos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pedidos we want to update
     *   }
     * })
    **/
    upsert<T extends pedidosUpsertArgs>(
      args: SelectSubset<T, pedidosUpsertArgs>
    ): CheckSelect<T, Prisma__pedidosClient<pedidos>, Prisma__pedidosClient<pedidosGetPayload<T>>>

    /**
     * Count the number of Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pedidosCountArgs} args - Arguments to filter Pedidos to count.
     * @example
     * // Count the number of Pedidos
     * const count = await prisma.pedidos.count({
     *   where: {
     *     // ... the filter for the Pedidos we want to count
     *   }
     * })
    **/
    count<T extends pedidosCountArgs>(
      args?: Subset<T, pedidosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PedidosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PedidosAggregateArgs>(args: Subset<T, PedidosAggregateArgs>): PrismaPromise<GetPedidosAggregateType<T>>

    /**
     * Group by Pedidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PedidosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PedidosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PedidosGroupByArgs['orderBy'] }
        : { orderBy?: PedidosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PedidosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPedidosGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for pedidos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pedidosClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * pedidos findUnique
   */
  export type pedidosFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Throw an Error if a pedidos can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pedidos to fetch.
     * 
    **/
    where: pedidosWhereUniqueInput
  }


  /**
   * pedidos findFirst
   */
  export type pedidosFindFirstArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Throw an Error if a pedidos can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which pedidos to fetch.
     * 
    **/
    where?: pedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<pedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pedidos.
     * 
    **/
    cursor?: pedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pedidos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pedidos.
     * 
    **/
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }


  /**
   * pedidos findMany
   */
  export type pedidosFindManyArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Filter, which pedidos to fetch.
     * 
    **/
    where?: pedidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pedidos to fetch.
     * 
    **/
    orderBy?: Enumerable<pedidosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pedidos.
     * 
    **/
    cursor?: pedidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pedidos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pedidos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PedidosScalarFieldEnum>
  }


  /**
   * pedidos create
   */
  export type pedidosCreateArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * The data needed to create a pedidos.
     * 
    **/
    data: XOR<pedidosCreateInput, pedidosUncheckedCreateInput>
  }


  /**
   * pedidos createMany
   */
  export type pedidosCreateManyArgs = {
    /**
     * The data used to create many pedidos.
     * 
    **/
    data: Enumerable<pedidosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * pedidos update
   */
  export type pedidosUpdateArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * The data needed to update a pedidos.
     * 
    **/
    data: XOR<pedidosUpdateInput, pedidosUncheckedUpdateInput>
    /**
     * Choose, which pedidos to update.
     * 
    **/
    where: pedidosWhereUniqueInput
  }


  /**
   * pedidos updateMany
   */
  export type pedidosUpdateManyArgs = {
    /**
     * The data used to update pedidos.
     * 
    **/
    data: XOR<pedidosUpdateManyMutationInput, pedidosUncheckedUpdateManyInput>
    /**
     * Filter which pedidos to update
     * 
    **/
    where?: pedidosWhereInput
  }


  /**
   * pedidos upsert
   */
  export type pedidosUpsertArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * The filter to search for the pedidos to update in case it exists.
     * 
    **/
    where: pedidosWhereUniqueInput
    /**
     * In case the pedidos found by the `where` argument doesn't exist, create a new pedidos with this data.
     * 
    **/
    create: XOR<pedidosCreateInput, pedidosUncheckedCreateInput>
    /**
     * In case the pedidos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<pedidosUpdateInput, pedidosUncheckedUpdateInput>
  }


  /**
   * pedidos delete
   */
  export type pedidosDeleteArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
    /**
     * Filter which pedidos to delete.
     * 
    **/
    where: pedidosWhereUniqueInput
  }


  /**
   * pedidos deleteMany
   */
  export type pedidosDeleteManyArgs = {
    /**
     * Filter which pedidos to delete
     * 
    **/
    where?: pedidosWhereInput
  }


  /**
   * pedidos without action
   */
  export type pedidosArgs = {
    /**
     * Select specific fields to fetch from the pedidos
     * 
    **/
    select?: pedidosSelect | null
  }



  /**
   * Model personal
   */


  export type AggregatePersonal = {
    _count: PersonalCountAggregateOutputType | null
    _avg: PersonalAvgAggregateOutputType | null
    _sum: PersonalSumAggregateOutputType | null
    _min: PersonalMinAggregateOutputType | null
    _max: PersonalMaxAggregateOutputType | null
  }

  export type PersonalAvgAggregateOutputType = {
    id_personal: number | null
    id_rol: number | null
  }

  export type PersonalSumAggregateOutputType = {
    id_personal: number | null
    id_rol: number | null
  }

  export type PersonalMinAggregateOutputType = {
    id_personal: number | null
    nm_prsnl: string | null
    ap_pat: string | null
    ap_mat: string | null
    id_rol: number | null
  }

  export type PersonalMaxAggregateOutputType = {
    id_personal: number | null
    nm_prsnl: string | null
    ap_pat: string | null
    ap_mat: string | null
    id_rol: number | null
  }

  export type PersonalCountAggregateOutputType = {
    id_personal: number
    nm_prsnl: number
    ap_pat: number
    ap_mat: number
    id_rol: number
    _all: number
  }


  export type PersonalAvgAggregateInputType = {
    id_personal?: true
    id_rol?: true
  }

  export type PersonalSumAggregateInputType = {
    id_personal?: true
    id_rol?: true
  }

  export type PersonalMinAggregateInputType = {
    id_personal?: true
    nm_prsnl?: true
    ap_pat?: true
    ap_mat?: true
    id_rol?: true
  }

  export type PersonalMaxAggregateInputType = {
    id_personal?: true
    nm_prsnl?: true
    ap_pat?: true
    ap_mat?: true
    id_rol?: true
  }

  export type PersonalCountAggregateInputType = {
    id_personal?: true
    nm_prsnl?: true
    ap_pat?: true
    ap_mat?: true
    id_rol?: true
    _all?: true
  }

  export type PersonalAggregateArgs = {
    /**
     * Filter which personal to aggregate.
     * 
    **/
    where?: personalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personals to fetch.
     * 
    **/
    orderBy?: Enumerable<personalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: personalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned personals
    **/
    _count?: true | PersonalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalMaxAggregateInputType
  }

  export type GetPersonalAggregateType<T extends PersonalAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonal[P]>
      : GetScalarType<T[P], AggregatePersonal[P]>
  }




  export type PersonalGroupByArgs = {
    where?: personalWhereInput
    orderBy?: Enumerable<personalOrderByWithAggregationInput>
    by: Array<PersonalScalarFieldEnum>
    having?: personalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalCountAggregateInputType | true
    _avg?: PersonalAvgAggregateInputType
    _sum?: PersonalSumAggregateInputType
    _min?: PersonalMinAggregateInputType
    _max?: PersonalMaxAggregateInputType
  }


  export type PersonalGroupByOutputType = {
    id_personal: number
    nm_prsnl: string | null
    ap_pat: string | null
    ap_mat: string | null
    id_rol: number | null
    _count: PersonalCountAggregateOutputType | null
    _avg: PersonalAvgAggregateOutputType | null
    _sum: PersonalSumAggregateOutputType | null
    _min: PersonalMinAggregateOutputType | null
    _max: PersonalMaxAggregateOutputType | null
  }

  type GetPersonalGroupByPayload<T extends PersonalGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PersonalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalGroupByOutputType[P]>
        }
      >
    >


  export type personalSelect = {
    id_personal?: boolean
    nm_prsnl?: boolean
    ap_pat?: boolean
    ap_mat?: boolean
    id_rol?: boolean
    roles?: boolean | rolesArgs
  }

  export type personalInclude = {
    roles?: boolean | rolesArgs
  }

  export type personalGetPayload<
    S extends boolean | null | undefined | personalArgs,
    U = keyof S
      > = S extends true
        ? personal
    : S extends undefined
    ? never
    : S extends personalArgs | personalFindManyArgs
    ?'include' extends U
    ? personal  & {
    [P in TrueKeys<S['include']>]:
        P extends 'roles' ? rolesGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'roles' ? rolesGetPayload<S['select'][P]> | null :  P extends keyof personal ? personal[P] : never
  } 
    : personal
  : personal


  type personalCountArgs = Merge<
    Omit<personalFindManyArgs, 'select' | 'include'> & {
      select?: PersonalCountAggregateInputType | true
    }
  >

  export interface personalDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Personal that matches the filter.
     * @param {personalFindUniqueArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends personalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, personalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'personal'> extends True ? CheckSelect<T, Prisma__personalClient<personal>, Prisma__personalClient<personalGetPayload<T>>> : CheckSelect<T, Prisma__personalClient<personal | null >, Prisma__personalClient<personalGetPayload<T> | null >>

    /**
     * Find the first Personal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personalFindFirstArgs} args - Arguments to find a Personal
     * @example
     * // Get one Personal
     * const personal = await prisma.personal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends personalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, personalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'personal'> extends True ? CheckSelect<T, Prisma__personalClient<personal>, Prisma__personalClient<personalGetPayload<T>>> : CheckSelect<T, Prisma__personalClient<personal | null >, Prisma__personalClient<personalGetPayload<T> | null >>

    /**
     * Find zero or more Personals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personals
     * const personals = await prisma.personal.findMany()
     * 
     * // Get first 10 Personals
     * const personals = await prisma.personal.findMany({ take: 10 })
     * 
     * // Only select the `id_personal`
     * const personalWithId_personalOnly = await prisma.personal.findMany({ select: { id_personal: true } })
     * 
    **/
    findMany<T extends personalFindManyArgs>(
      args?: SelectSubset<T, personalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<personal>>, PrismaPromise<Array<personalGetPayload<T>>>>

    /**
     * Create a Personal.
     * @param {personalCreateArgs} args - Arguments to create a Personal.
     * @example
     * // Create one Personal
     * const Personal = await prisma.personal.create({
     *   data: {
     *     // ... data to create a Personal
     *   }
     * })
     * 
    **/
    create<T extends personalCreateArgs>(
      args: SelectSubset<T, personalCreateArgs>
    ): CheckSelect<T, Prisma__personalClient<personal>, Prisma__personalClient<personalGetPayload<T>>>

    /**
     * Create many Personals.
     *     @param {personalCreateManyArgs} args - Arguments to create many Personals.
     *     @example
     *     // Create many Personals
     *     const personal = await prisma.personal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends personalCreateManyArgs>(
      args?: SelectSubset<T, personalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Personal.
     * @param {personalDeleteArgs} args - Arguments to delete one Personal.
     * @example
     * // Delete one Personal
     * const Personal = await prisma.personal.delete({
     *   where: {
     *     // ... filter to delete one Personal
     *   }
     * })
     * 
    **/
    delete<T extends personalDeleteArgs>(
      args: SelectSubset<T, personalDeleteArgs>
    ): CheckSelect<T, Prisma__personalClient<personal>, Prisma__personalClient<personalGetPayload<T>>>

    /**
     * Update one Personal.
     * @param {personalUpdateArgs} args - Arguments to update one Personal.
     * @example
     * // Update one Personal
     * const personal = await prisma.personal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends personalUpdateArgs>(
      args: SelectSubset<T, personalUpdateArgs>
    ): CheckSelect<T, Prisma__personalClient<personal>, Prisma__personalClient<personalGetPayload<T>>>

    /**
     * Delete zero or more Personals.
     * @param {personalDeleteManyArgs} args - Arguments to filter Personals to delete.
     * @example
     * // Delete a few Personals
     * const { count } = await prisma.personal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends personalDeleteManyArgs>(
      args?: SelectSubset<T, personalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personals
     * const personal = await prisma.personal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends personalUpdateManyArgs>(
      args: SelectSubset<T, personalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Personal.
     * @param {personalUpsertArgs} args - Arguments to update or create a Personal.
     * @example
     * // Update or create a Personal
     * const personal = await prisma.personal.upsert({
     *   create: {
     *     // ... data to create a Personal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Personal we want to update
     *   }
     * })
    **/
    upsert<T extends personalUpsertArgs>(
      args: SelectSubset<T, personalUpsertArgs>
    ): CheckSelect<T, Prisma__personalClient<personal>, Prisma__personalClient<personalGetPayload<T>>>

    /**
     * Count the number of Personals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personalCountArgs} args - Arguments to filter Personals to count.
     * @example
     * // Count the number of Personals
     * const count = await prisma.personal.count({
     *   where: {
     *     // ... the filter for the Personals we want to count
     *   }
     * })
    **/
    count<T extends personalCountArgs>(
      args?: Subset<T, personalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Personal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalAggregateArgs>(args: Subset<T, PersonalAggregateArgs>): PrismaPromise<GetPersonalAggregateType<T>>

    /**
     * Group by Personal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalGroupByArgs['orderBy'] }
        : { orderBy?: PersonalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for personal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__personalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    roles<T extends rolesArgs = {}>(args?: Subset<T, rolesArgs>): CheckSelect<T, Prisma__rolesClient<roles | null >, Prisma__rolesClient<rolesGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * personal findUnique
   */
  export type personalFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
    /**
     * Throw an Error if a personal can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which personal to fetch.
     * 
    **/
    where: personalWhereUniqueInput
  }


  /**
   * personal findFirst
   */
  export type personalFindFirstArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
    /**
     * Throw an Error if a personal can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which personal to fetch.
     * 
    **/
    where?: personalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personals to fetch.
     * 
    **/
    orderBy?: Enumerable<personalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for personals.
     * 
    **/
    cursor?: personalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of personals.
     * 
    **/
    distinct?: Enumerable<PersonalScalarFieldEnum>
  }


  /**
   * personal findMany
   */
  export type personalFindManyArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
    /**
     * Filter, which personals to fetch.
     * 
    **/
    where?: personalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personals to fetch.
     * 
    **/
    orderBy?: Enumerable<personalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing personals.
     * 
    **/
    cursor?: personalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PersonalScalarFieldEnum>
  }


  /**
   * personal create
   */
  export type personalCreateArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
    /**
     * The data needed to create a personal.
     * 
    **/
    data: XOR<personalCreateInput, personalUncheckedCreateInput>
  }


  /**
   * personal createMany
   */
  export type personalCreateManyArgs = {
    /**
     * The data used to create many personals.
     * 
    **/
    data: Enumerable<personalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * personal update
   */
  export type personalUpdateArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
    /**
     * The data needed to update a personal.
     * 
    **/
    data: XOR<personalUpdateInput, personalUncheckedUpdateInput>
    /**
     * Choose, which personal to update.
     * 
    **/
    where: personalWhereUniqueInput
  }


  /**
   * personal updateMany
   */
  export type personalUpdateManyArgs = {
    /**
     * The data used to update personals.
     * 
    **/
    data: XOR<personalUpdateManyMutationInput, personalUncheckedUpdateManyInput>
    /**
     * Filter which personals to update
     * 
    **/
    where?: personalWhereInput
  }


  /**
   * personal upsert
   */
  export type personalUpsertArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
    /**
     * The filter to search for the personal to update in case it exists.
     * 
    **/
    where: personalWhereUniqueInput
    /**
     * In case the personal found by the `where` argument doesn't exist, create a new personal with this data.
     * 
    **/
    create: XOR<personalCreateInput, personalUncheckedCreateInput>
    /**
     * In case the personal was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<personalUpdateInput, personalUncheckedUpdateInput>
  }


  /**
   * personal delete
   */
  export type personalDeleteArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
    /**
     * Filter which personal to delete.
     * 
    **/
    where: personalWhereUniqueInput
  }


  /**
   * personal deleteMany
   */
  export type personalDeleteManyArgs = {
    /**
     * Filter which personals to delete
     * 
    **/
    where?: personalWhereInput
  }


  /**
   * personal without action
   */
  export type personalArgs = {
    /**
     * Select specific fields to fetch from the personal
     * 
    **/
    select?: personalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: personalInclude | null
  }



  /**
   * Model roles
   */


  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id_rol: number | null
  }

  export type RolesSumAggregateOutputType = {
    id_rol: number | null
  }

  export type RolesMinAggregateOutputType = {
    id_rol: number | null
    rol: rol | null
  }

  export type RolesMaxAggregateOutputType = {
    id_rol: number | null
    rol: rol | null
  }

  export type RolesCountAggregateOutputType = {
    id_rol: number
    rol: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id_rol?: true
  }

  export type RolesSumAggregateInputType = {
    id_rol?: true
  }

  export type RolesMinAggregateInputType = {
    id_rol?: true
    rol?: true
  }

  export type RolesMaxAggregateInputType = {
    id_rol?: true
    rol?: true
  }

  export type RolesCountAggregateInputType = {
    id_rol?: true
    rol?: true
    _all?: true
  }

  export type RolesAggregateArgs = {
    /**
     * Filter which roles to aggregate.
     * 
    **/
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<rolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs = {
    where?: rolesWhereInput
    orderBy?: Enumerable<rolesOrderByWithAggregationInput>
    by: Array<RolesScalarFieldEnum>
    having?: rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }


  export type RolesGroupByOutputType = {
    id_rol: number
    rol: rol | null
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type rolesSelect = {
    id_rol?: boolean
    rol?: boolean
    huespedes?: boolean | huespedesFindManyArgs
    personal?: boolean | personalFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  }

  export type rolesInclude = {
    huespedes?: boolean | huespedesFindManyArgs
    personal?: boolean | personalFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  }

  export type rolesGetPayload<
    S extends boolean | null | undefined | rolesArgs,
    U = keyof S
      > = S extends true
        ? roles
    : S extends undefined
    ? never
    : S extends rolesArgs | rolesFindManyArgs
    ?'include' extends U
    ? roles  & {
    [P in TrueKeys<S['include']>]:
        P extends 'huespedes' ? Array < huespedesGetPayload<S['include'][P]>>  :
        P extends 'personal' ? Array < personalGetPayload<S['include'][P]>>  :
        P extends '_count' ? RolesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'huespedes' ? Array < huespedesGetPayload<S['select'][P]>>  :
        P extends 'personal' ? Array < personalGetPayload<S['select'][P]>>  :
        P extends '_count' ? RolesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof roles ? roles[P] : never
  } 
    : roles
  : roles


  type rolesCountArgs = Merge<
    Omit<rolesFindManyArgs, 'select' | 'include'> & {
      select?: RolesCountAggregateInputType | true
    }
  >

  export interface rolesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Roles that matches the filter.
     * @param {rolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends rolesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, rolesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'roles'> extends True ? CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>> : CheckSelect<T, Prisma__rolesClient<roles | null >, Prisma__rolesClient<rolesGetPayload<T> | null >>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends rolesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, rolesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'roles'> extends True ? CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>> : CheckSelect<T, Prisma__rolesClient<roles | null >, Prisma__rolesClient<rolesGetPayload<T> | null >>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id_rol`
     * const rolesWithId_rolOnly = await prisma.roles.findMany({ select: { id_rol: true } })
     * 
    **/
    findMany<T extends rolesFindManyArgs>(
      args?: SelectSubset<T, rolesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<roles>>, PrismaPromise<Array<rolesGetPayload<T>>>>

    /**
     * Create a Roles.
     * @param {rolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
    **/
    create<T extends rolesCreateArgs>(
      args: SelectSubset<T, rolesCreateArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Create many Roles.
     *     @param {rolesCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const roles = await prisma.roles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends rolesCreateManyArgs>(
      args?: SelectSubset<T, rolesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Roles.
     * @param {rolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
    **/
    delete<T extends rolesDeleteArgs>(
      args: SelectSubset<T, rolesDeleteArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Update one Roles.
     * @param {rolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rolesUpdateArgs>(
      args: SelectSubset<T, rolesUpdateArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {rolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rolesDeleteManyArgs>(
      args?: SelectSubset<T, rolesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rolesUpdateManyArgs>(
      args: SelectSubset<T, rolesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {rolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
    **/
    upsert<T extends rolesUpsertArgs>(
      args: SelectSubset<T, rolesUpsertArgs>
    ): CheckSelect<T, Prisma__rolesClient<roles>, Prisma__rolesClient<rolesGetPayload<T>>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends rolesCountArgs>(
      args?: Subset<T, rolesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rolesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    huespedes<T extends huespedesFindManyArgs = {}>(args?: Subset<T, huespedesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<huespedes>>, PrismaPromise<Array<huespedesGetPayload<T>>>>;

    personal<T extends personalFindManyArgs = {}>(args?: Subset<T, personalFindManyArgs>): CheckSelect<T, PrismaPromise<Array<personal>>, PrismaPromise<Array<personalGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * roles findUnique
   */
  export type rolesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Throw an Error if a roles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which roles to fetch.
     * 
    **/
    where: rolesWhereUniqueInput
  }


  /**
   * roles findFirst
   */
  export type rolesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Throw an Error if a roles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which roles to fetch.
     * 
    **/
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<rolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     * 
    **/
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     * 
    **/
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * roles findMany
   */
  export type rolesFindManyArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Filter, which roles to fetch.
     * 
    **/
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     * 
    **/
    orderBy?: Enumerable<rolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     * 
    **/
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * roles create
   */
  export type rolesCreateArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * The data needed to create a roles.
     * 
    **/
    data: XOR<rolesCreateInput, rolesUncheckedCreateInput>
  }


  /**
   * roles createMany
   */
  export type rolesCreateManyArgs = {
    /**
     * The data used to create many roles.
     * 
    **/
    data: Enumerable<rolesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * roles update
   */
  export type rolesUpdateArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * The data needed to update a roles.
     * 
    **/
    data: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
    /**
     * Choose, which roles to update.
     * 
    **/
    where: rolesWhereUniqueInput
  }


  /**
   * roles updateMany
   */
  export type rolesUpdateManyArgs = {
    /**
     * The data used to update roles.
     * 
    **/
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     * 
    **/
    where?: rolesWhereInput
  }


  /**
   * roles upsert
   */
  export type rolesUpsertArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * The filter to search for the roles to update in case it exists.
     * 
    **/
    where: rolesWhereUniqueInput
    /**
     * In case the roles found by the `where` argument doesn't exist, create a new roles with this data.
     * 
    **/
    create: XOR<rolesCreateInput, rolesUncheckedCreateInput>
    /**
     * In case the roles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
  }


  /**
   * roles delete
   */
  export type rolesDeleteArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
    /**
     * Filter which roles to delete.
     * 
    **/
    where: rolesWhereUniqueInput
  }


  /**
   * roles deleteMany
   */
  export type rolesDeleteManyArgs = {
    /**
     * Filter which roles to delete
     * 
    **/
    where?: rolesWhereInput
  }


  /**
   * roles without action
   */
  export type rolesArgs = {
    /**
     * Select specific fields to fetch from the roles
     * 
    **/
    select?: rolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: rolesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const HabitacionesScalarFieldEnum: {
    id_hab: 'id_hab',
    num_hab: 'num_hab',
    tipo_hab: 'tipo_hab'
  };

  export type HabitacionesScalarFieldEnum = (typeof HabitacionesScalarFieldEnum)[keyof typeof HabitacionesScalarFieldEnum]


  export const HuespedesScalarFieldEnum: {
    id_huesped: 'id_huesped',
    nm_huesped: 'nm_huesped',
    ap_pat: 'ap_pat',
    ap_mat: 'ap_mat',
    fecha_llegada: 'fecha_llegada',
    num_acomp: 'num_acomp',
    correo: 'correo',
    id_hab: 'id_hab',
    passwrd: 'passwrd',
    id_rol: 'id_rol'
  };

  export type HuespedesScalarFieldEnum = (typeof HuespedesScalarFieldEnum)[keyof typeof HuespedesScalarFieldEnum]


  export const IncidenciasScalarFieldEnum: {
    id_incidencia: 'id_incidencia',
    descripcion: 'descripcion',
    asunto: 'asunto'
  };

  export type IncidenciasScalarFieldEnum = (typeof IncidenciasScalarFieldEnum)[keyof typeof IncidenciasScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    id_item: 'id_item',
    nm_item: 'nm_item',
    cantidad_exist: 'cantidad_exist'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const PedidosScalarFieldEnum: {
    id_pedido: 'id_pedido',
    estado: 'estado',
    tipo_pedido: 'tipo_pedido'
  };

  export type PedidosScalarFieldEnum = (typeof PedidosScalarFieldEnum)[keyof typeof PedidosScalarFieldEnum]


  export const PersonalScalarFieldEnum: {
    id_personal: 'id_personal',
    nm_prsnl: 'nm_prsnl',
    ap_pat: 'ap_pat',
    ap_mat: 'ap_mat',
    id_rol: 'id_rol'
  };

  export type PersonalScalarFieldEnum = (typeof PersonalScalarFieldEnum)[keyof typeof PersonalScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id_rol: 'id_rol',
    rol: 'rol'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type habitacionesWhereInput = {
    AND?: Enumerable<habitacionesWhereInput>
    OR?: Enumerable<habitacionesWhereInput>
    NOT?: Enumerable<habitacionesWhereInput>
    id_hab?: IntFilter | number
    num_hab?: IntNullableFilter | number | null
    tipo_hab?: Enumtipo_habNullableFilter | tipo_hab | null
    huespedes?: HuespedesListRelationFilter
  }

  export type habitacionesOrderByWithRelationInput = {
    id_hab?: SortOrder
    num_hab?: SortOrder
    tipo_hab?: SortOrder
    huespedes?: huespedesOrderByRelationAggregateInput
  }

  export type habitacionesWhereUniqueInput = {
    id_hab?: number
  }

  export type habitacionesOrderByWithAggregationInput = {
    id_hab?: SortOrder
    num_hab?: SortOrder
    tipo_hab?: SortOrder
    _count?: habitacionesCountOrderByAggregateInput
    _avg?: habitacionesAvgOrderByAggregateInput
    _max?: habitacionesMaxOrderByAggregateInput
    _min?: habitacionesMinOrderByAggregateInput
    _sum?: habitacionesSumOrderByAggregateInput
  }

  export type habitacionesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<habitacionesScalarWhereWithAggregatesInput>
    OR?: Enumerable<habitacionesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<habitacionesScalarWhereWithAggregatesInput>
    id_hab?: IntWithAggregatesFilter | number
    num_hab?: IntNullableWithAggregatesFilter | number | null
    tipo_hab?: Enumtipo_habNullableWithAggregatesFilter | tipo_hab | null
  }

  export type huespedesWhereInput = {
    AND?: Enumerable<huespedesWhereInput>
    OR?: Enumerable<huespedesWhereInput>
    NOT?: Enumerable<huespedesWhereInput>
    id_huesped?: IntFilter | number
    nm_huesped?: StringFilter | string
    ap_pat?: StringFilter | string
    ap_mat?: StringNullableFilter | string | null
    fecha_llegada?: DateTimeFilter | Date | string
    num_acomp?: IntNullableFilter | number | null
    correo?: StringFilter | string
    id_hab?: IntFilter | number
    passwrd?: StringNullableFilter | string | null
    id_rol?: IntNullableFilter | number | null
    habitaciones?: XOR<HabitacionesRelationFilter, habitacionesWhereInput>
    roles?: XOR<RolesRelationFilter, rolesWhereInput> | null
  }

  export type huespedesOrderByWithRelationInput = {
    id_huesped?: SortOrder
    nm_huesped?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    fecha_llegada?: SortOrder
    num_acomp?: SortOrder
    correo?: SortOrder
    id_hab?: SortOrder
    passwrd?: SortOrder
    id_rol?: SortOrder
    habitaciones?: habitacionesOrderByWithRelationInput
    roles?: rolesOrderByWithRelationInput
  }

  export type huespedesWhereUniqueInput = {
    id_huesped?: number
  }

  export type huespedesOrderByWithAggregationInput = {
    id_huesped?: SortOrder
    nm_huesped?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    fecha_llegada?: SortOrder
    num_acomp?: SortOrder
    correo?: SortOrder
    id_hab?: SortOrder
    passwrd?: SortOrder
    id_rol?: SortOrder
    _count?: huespedesCountOrderByAggregateInput
    _avg?: huespedesAvgOrderByAggregateInput
    _max?: huespedesMaxOrderByAggregateInput
    _min?: huespedesMinOrderByAggregateInput
    _sum?: huespedesSumOrderByAggregateInput
  }

  export type huespedesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<huespedesScalarWhereWithAggregatesInput>
    OR?: Enumerable<huespedesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<huespedesScalarWhereWithAggregatesInput>
    id_huesped?: IntWithAggregatesFilter | number
    nm_huesped?: StringWithAggregatesFilter | string
    ap_pat?: StringWithAggregatesFilter | string
    ap_mat?: StringNullableWithAggregatesFilter | string | null
    fecha_llegada?: DateTimeWithAggregatesFilter | Date | string
    num_acomp?: IntNullableWithAggregatesFilter | number | null
    correo?: StringWithAggregatesFilter | string
    id_hab?: IntWithAggregatesFilter | number
    passwrd?: StringNullableWithAggregatesFilter | string | null
    id_rol?: IntNullableWithAggregatesFilter | number | null
  }

  export type incidenciasWhereInput = {
    AND?: Enumerable<incidenciasWhereInput>
    OR?: Enumerable<incidenciasWhereInput>
    NOT?: Enumerable<incidenciasWhereInput>
    id_incidencia?: IntFilter | number
    descripcion?: StringNullableFilter | string | null
    asunto?: EnumasuntoNullableFilter | asunto | null
  }

  export type incidenciasOrderByWithRelationInput = {
    id_incidencia?: SortOrder
    descripcion?: SortOrder
    asunto?: SortOrder
  }

  export type incidenciasWhereUniqueInput = {
    id_incidencia?: number
  }

  export type incidenciasOrderByWithAggregationInput = {
    id_incidencia?: SortOrder
    descripcion?: SortOrder
    asunto?: SortOrder
    _count?: incidenciasCountOrderByAggregateInput
    _avg?: incidenciasAvgOrderByAggregateInput
    _max?: incidenciasMaxOrderByAggregateInput
    _min?: incidenciasMinOrderByAggregateInput
    _sum?: incidenciasSumOrderByAggregateInput
  }

  export type incidenciasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<incidenciasScalarWhereWithAggregatesInput>
    OR?: Enumerable<incidenciasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<incidenciasScalarWhereWithAggregatesInput>
    id_incidencia?: IntWithAggregatesFilter | number
    descripcion?: StringNullableWithAggregatesFilter | string | null
    asunto?: EnumasuntoNullableWithAggregatesFilter | asunto | null
  }

  export type itemsWhereInput = {
    AND?: Enumerable<itemsWhereInput>
    OR?: Enumerable<itemsWhereInput>
    NOT?: Enumerable<itemsWhereInput>
    id_item?: IntFilter | number
    nm_item?: StringNullableFilter | string | null
    cantidad_exist?: IntNullableFilter | number | null
  }

  export type itemsOrderByWithRelationInput = {
    id_item?: SortOrder
    nm_item?: SortOrder
    cantidad_exist?: SortOrder
  }

  export type itemsWhereUniqueInput = {
    id_item?: number
  }

  export type itemsOrderByWithAggregationInput = {
    id_item?: SortOrder
    nm_item?: SortOrder
    cantidad_exist?: SortOrder
    _count?: itemsCountOrderByAggregateInput
    _avg?: itemsAvgOrderByAggregateInput
    _max?: itemsMaxOrderByAggregateInput
    _min?: itemsMinOrderByAggregateInput
    _sum?: itemsSumOrderByAggregateInput
  }

  export type itemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<itemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<itemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<itemsScalarWhereWithAggregatesInput>
    id_item?: IntWithAggregatesFilter | number
    nm_item?: StringNullableWithAggregatesFilter | string | null
    cantidad_exist?: IntNullableWithAggregatesFilter | number | null
  }

  export type pedidosWhereInput = {
    AND?: Enumerable<pedidosWhereInput>
    OR?: Enumerable<pedidosWhereInput>
    NOT?: Enumerable<pedidosWhereInput>
    id_pedido?: IntFilter | number
    estado?: EnumestadoNullableFilter | estado | null
    tipo_pedido?: Enumtipo_pedidoNullableFilter | tipo_pedido | null
  }

  export type pedidosOrderByWithRelationInput = {
    id_pedido?: SortOrder
    estado?: SortOrder
    tipo_pedido?: SortOrder
  }

  export type pedidosWhereUniqueInput = {
    id_pedido?: number
  }

  export type pedidosOrderByWithAggregationInput = {
    id_pedido?: SortOrder
    estado?: SortOrder
    tipo_pedido?: SortOrder
    _count?: pedidosCountOrderByAggregateInput
    _avg?: pedidosAvgOrderByAggregateInput
    _max?: pedidosMaxOrderByAggregateInput
    _min?: pedidosMinOrderByAggregateInput
    _sum?: pedidosSumOrderByAggregateInput
  }

  export type pedidosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<pedidosScalarWhereWithAggregatesInput>
    OR?: Enumerable<pedidosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<pedidosScalarWhereWithAggregatesInput>
    id_pedido?: IntWithAggregatesFilter | number
    estado?: EnumestadoNullableWithAggregatesFilter | estado | null
    tipo_pedido?: Enumtipo_pedidoNullableWithAggregatesFilter | tipo_pedido | null
  }

  export type personalWhereInput = {
    AND?: Enumerable<personalWhereInput>
    OR?: Enumerable<personalWhereInput>
    NOT?: Enumerable<personalWhereInput>
    id_personal?: IntFilter | number
    nm_prsnl?: StringNullableFilter | string | null
    ap_pat?: StringNullableFilter | string | null
    ap_mat?: StringNullableFilter | string | null
    id_rol?: IntNullableFilter | number | null
    roles?: XOR<RolesRelationFilter, rolesWhereInput> | null
  }

  export type personalOrderByWithRelationInput = {
    id_personal?: SortOrder
    nm_prsnl?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    id_rol?: SortOrder
    roles?: rolesOrderByWithRelationInput
  }

  export type personalWhereUniqueInput = {
    id_personal?: number
  }

  export type personalOrderByWithAggregationInput = {
    id_personal?: SortOrder
    nm_prsnl?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    id_rol?: SortOrder
    _count?: personalCountOrderByAggregateInput
    _avg?: personalAvgOrderByAggregateInput
    _max?: personalMaxOrderByAggregateInput
    _min?: personalMinOrderByAggregateInput
    _sum?: personalSumOrderByAggregateInput
  }

  export type personalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<personalScalarWhereWithAggregatesInput>
    OR?: Enumerable<personalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<personalScalarWhereWithAggregatesInput>
    id_personal?: IntWithAggregatesFilter | number
    nm_prsnl?: StringNullableWithAggregatesFilter | string | null
    ap_pat?: StringNullableWithAggregatesFilter | string | null
    ap_mat?: StringNullableWithAggregatesFilter | string | null
    id_rol?: IntNullableWithAggregatesFilter | number | null
  }

  export type rolesWhereInput = {
    AND?: Enumerable<rolesWhereInput>
    OR?: Enumerable<rolesWhereInput>
    NOT?: Enumerable<rolesWhereInput>
    id_rol?: IntFilter | number
    rol?: EnumrolNullableFilter | rol | null
    huespedes?: HuespedesListRelationFilter
    personal?: PersonalListRelationFilter
  }

  export type rolesOrderByWithRelationInput = {
    id_rol?: SortOrder
    rol?: SortOrder
    huespedes?: huespedesOrderByRelationAggregateInput
    personal?: personalOrderByRelationAggregateInput
  }

  export type rolesWhereUniqueInput = {
    id_rol?: number
  }

  export type rolesOrderByWithAggregationInput = {
    id_rol?: SortOrder
    rol?: SortOrder
    _count?: rolesCountOrderByAggregateInput
    _avg?: rolesAvgOrderByAggregateInput
    _max?: rolesMaxOrderByAggregateInput
    _min?: rolesMinOrderByAggregateInput
    _sum?: rolesSumOrderByAggregateInput
  }

  export type rolesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<rolesScalarWhereWithAggregatesInput>
    OR?: Enumerable<rolesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<rolesScalarWhereWithAggregatesInput>
    id_rol?: IntWithAggregatesFilter | number
    rol?: EnumrolNullableWithAggregatesFilter | rol | null
  }

  export type habitacionesCreateInput = {
    num_hab?: number | null
    tipo_hab?: tipo_hab | null
    huespedes?: huespedesCreateNestedManyWithoutHabitacionesInput
  }

  export type habitacionesUncheckedCreateInput = {
    id_hab?: number
    num_hab?: number | null
    tipo_hab?: tipo_hab | null
    huespedes?: huespedesUncheckedCreateNestedManyWithoutHabitacionesInput
  }

  export type habitacionesUpdateInput = {
    num_hab?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_hab?: NullableEnumtipo_habFieldUpdateOperationsInput | tipo_hab | null
    huespedes?: huespedesUpdateManyWithoutHabitacionesInput
  }

  export type habitacionesUncheckedUpdateInput = {
    id_hab?: IntFieldUpdateOperationsInput | number
    num_hab?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_hab?: NullableEnumtipo_habFieldUpdateOperationsInput | tipo_hab | null
    huespedes?: huespedesUncheckedUpdateManyWithoutHabitacionesInput
  }

  export type habitacionesCreateManyInput = {
    id_hab?: number
    num_hab?: number | null
    tipo_hab?: tipo_hab | null
  }

  export type habitacionesUpdateManyMutationInput = {
    num_hab?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_hab?: NullableEnumtipo_habFieldUpdateOperationsInput | tipo_hab | null
  }

  export type habitacionesUncheckedUpdateManyInput = {
    id_hab?: IntFieldUpdateOperationsInput | number
    num_hab?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_hab?: NullableEnumtipo_habFieldUpdateOperationsInput | tipo_hab | null
  }

  export type huespedesCreateInput = {
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    passwrd?: string | null
    habitaciones: habitacionesCreateNestedOneWithoutHuespedesInput
    roles?: rolesCreateNestedOneWithoutHuespedesInput
  }

  export type huespedesUncheckedCreateInput = {
    id_huesped?: number
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    id_hab: number
    passwrd?: string | null
    id_rol?: number | null
  }

  export type huespedesUpdateInput = {
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    habitaciones?: habitacionesUpdateOneRequiredWithoutHuespedesInput
    roles?: rolesUpdateOneWithoutHuespedesInput
  }

  export type huespedesUncheckedUpdateInput = {
    id_huesped?: IntFieldUpdateOperationsInput | number
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    id_hab?: IntFieldUpdateOperationsInput | number
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    id_rol?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type huespedesCreateManyInput = {
    id_huesped?: number
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    id_hab: number
    passwrd?: string | null
    id_rol?: number | null
  }

  export type huespedesUpdateManyMutationInput = {
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type huespedesUncheckedUpdateManyInput = {
    id_huesped?: IntFieldUpdateOperationsInput | number
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    id_hab?: IntFieldUpdateOperationsInput | number
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    id_rol?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type incidenciasCreateInput = {
    descripcion?: string | null
    asunto?: asunto | null
  }

  export type incidenciasUncheckedCreateInput = {
    id_incidencia?: number
    descripcion?: string | null
    asunto?: asunto | null
  }

  export type incidenciasUpdateInput = {
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    asunto?: NullableEnumasuntoFieldUpdateOperationsInput | asunto | null
  }

  export type incidenciasUncheckedUpdateInput = {
    id_incidencia?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    asunto?: NullableEnumasuntoFieldUpdateOperationsInput | asunto | null
  }

  export type incidenciasCreateManyInput = {
    id_incidencia?: number
    descripcion?: string | null
    asunto?: asunto | null
  }

  export type incidenciasUpdateManyMutationInput = {
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    asunto?: NullableEnumasuntoFieldUpdateOperationsInput | asunto | null
  }

  export type incidenciasUncheckedUpdateManyInput = {
    id_incidencia?: IntFieldUpdateOperationsInput | number
    descripcion?: NullableStringFieldUpdateOperationsInput | string | null
    asunto?: NullableEnumasuntoFieldUpdateOperationsInput | asunto | null
  }

  export type itemsCreateInput = {
    nm_item?: string | null
    cantidad_exist?: number | null
  }

  export type itemsUncheckedCreateInput = {
    id_item?: number
    nm_item?: string | null
    cantidad_exist?: number | null
  }

  export type itemsUpdateInput = {
    nm_item?: NullableStringFieldUpdateOperationsInput | string | null
    cantidad_exist?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type itemsUncheckedUpdateInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    nm_item?: NullableStringFieldUpdateOperationsInput | string | null
    cantidad_exist?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type itemsCreateManyInput = {
    id_item?: number
    nm_item?: string | null
    cantidad_exist?: number | null
  }

  export type itemsUpdateManyMutationInput = {
    nm_item?: NullableStringFieldUpdateOperationsInput | string | null
    cantidad_exist?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type itemsUncheckedUpdateManyInput = {
    id_item?: IntFieldUpdateOperationsInput | number
    nm_item?: NullableStringFieldUpdateOperationsInput | string | null
    cantidad_exist?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type pedidosCreateInput = {
    estado?: estado | null
    tipo_pedido?: tipo_pedido | null
  }

  export type pedidosUncheckedCreateInput = {
    id_pedido?: number
    estado?: estado | null
    tipo_pedido?: tipo_pedido | null
  }

  export type pedidosUpdateInput = {
    estado?: NullableEnumestadoFieldUpdateOperationsInput | estado | null
    tipo_pedido?: NullableEnumtipo_pedidoFieldUpdateOperationsInput | tipo_pedido | null
  }

  export type pedidosUncheckedUpdateInput = {
    id_pedido?: IntFieldUpdateOperationsInput | number
    estado?: NullableEnumestadoFieldUpdateOperationsInput | estado | null
    tipo_pedido?: NullableEnumtipo_pedidoFieldUpdateOperationsInput | tipo_pedido | null
  }

  export type pedidosCreateManyInput = {
    id_pedido?: number
    estado?: estado | null
    tipo_pedido?: tipo_pedido | null
  }

  export type pedidosUpdateManyMutationInput = {
    estado?: NullableEnumestadoFieldUpdateOperationsInput | estado | null
    tipo_pedido?: NullableEnumtipo_pedidoFieldUpdateOperationsInput | tipo_pedido | null
  }

  export type pedidosUncheckedUpdateManyInput = {
    id_pedido?: IntFieldUpdateOperationsInput | number
    estado?: NullableEnumestadoFieldUpdateOperationsInput | estado | null
    tipo_pedido?: NullableEnumtipo_pedidoFieldUpdateOperationsInput | tipo_pedido | null
  }

  export type personalCreateInput = {
    nm_prsnl?: string | null
    ap_pat?: string | null
    ap_mat?: string | null
    roles?: rolesCreateNestedOneWithoutPersonalInput
  }

  export type personalUncheckedCreateInput = {
    id_personal?: number
    nm_prsnl?: string | null
    ap_pat?: string | null
    ap_mat?: string | null
    id_rol?: number | null
  }

  export type personalUpdateInput = {
    nm_prsnl?: NullableStringFieldUpdateOperationsInput | string | null
    ap_pat?: NullableStringFieldUpdateOperationsInput | string | null
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: rolesUpdateOneWithoutPersonalInput
  }

  export type personalUncheckedUpdateInput = {
    id_personal?: IntFieldUpdateOperationsInput | number
    nm_prsnl?: NullableStringFieldUpdateOperationsInput | string | null
    ap_pat?: NullableStringFieldUpdateOperationsInput | string | null
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    id_rol?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type personalCreateManyInput = {
    id_personal?: number
    nm_prsnl?: string | null
    ap_pat?: string | null
    ap_mat?: string | null
    id_rol?: number | null
  }

  export type personalUpdateManyMutationInput = {
    nm_prsnl?: NullableStringFieldUpdateOperationsInput | string | null
    ap_pat?: NullableStringFieldUpdateOperationsInput | string | null
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type personalUncheckedUpdateManyInput = {
    id_personal?: IntFieldUpdateOperationsInput | number
    nm_prsnl?: NullableStringFieldUpdateOperationsInput | string | null
    ap_pat?: NullableStringFieldUpdateOperationsInput | string | null
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    id_rol?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type rolesCreateInput = {
    rol?: rol | null
    huespedes?: huespedesCreateNestedManyWithoutRolesInput
    personal?: personalCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateInput = {
    id_rol?: number
    rol?: rol | null
    huespedes?: huespedesUncheckedCreateNestedManyWithoutRolesInput
    personal?: personalUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesUpdateInput = {
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
    huespedes?: huespedesUpdateManyWithoutRolesInput
    personal?: personalUpdateManyWithoutRolesInput
  }

  export type rolesUncheckedUpdateInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
    huespedes?: huespedesUncheckedUpdateManyWithoutRolesInput
    personal?: personalUncheckedUpdateManyWithoutRolesInput
  }

  export type rolesCreateManyInput = {
    id_rol?: number
    rol?: rol | null
  }

  export type rolesUpdateManyMutationInput = {
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
  }

  export type rolesUncheckedUpdateManyInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Enumtipo_habNullableFilter = {
    equals?: tipo_hab | null
    in?: Enumerable<tipo_hab> | null
    notIn?: Enumerable<tipo_hab> | null
    not?: NestedEnumtipo_habNullableFilter | tipo_hab | null
  }

  export type HuespedesListRelationFilter = {
    every?: huespedesWhereInput
    some?: huespedesWhereInput
    none?: huespedesWhereInput
  }

  export type huespedesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type habitacionesCountOrderByAggregateInput = {
    id_hab?: SortOrder
    num_hab?: SortOrder
    tipo_hab?: SortOrder
  }

  export type habitacionesAvgOrderByAggregateInput = {
    id_hab?: SortOrder
    num_hab?: SortOrder
  }

  export type habitacionesMaxOrderByAggregateInput = {
    id_hab?: SortOrder
    num_hab?: SortOrder
    tipo_hab?: SortOrder
  }

  export type habitacionesMinOrderByAggregateInput = {
    id_hab?: SortOrder
    num_hab?: SortOrder
    tipo_hab?: SortOrder
  }

  export type habitacionesSumOrderByAggregateInput = {
    id_hab?: SortOrder
    num_hab?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type Enumtipo_habNullableWithAggregatesFilter = {
    equals?: tipo_hab | null
    in?: Enumerable<tipo_hab> | null
    notIn?: Enumerable<tipo_hab> | null
    not?: NestedEnumtipo_habNullableWithAggregatesFilter | tipo_hab | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumtipo_habNullableFilter
    _max?: NestedEnumtipo_habNullableFilter
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type HabitacionesRelationFilter = {
    is?: habitacionesWhereInput
    isNot?: habitacionesWhereInput
  }

  export type RolesRelationFilter = {
    is?: rolesWhereInput | null
    isNot?: rolesWhereInput | null
  }

  export type huespedesCountOrderByAggregateInput = {
    id_huesped?: SortOrder
    nm_huesped?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    fecha_llegada?: SortOrder
    num_acomp?: SortOrder
    correo?: SortOrder
    id_hab?: SortOrder
    passwrd?: SortOrder
    id_rol?: SortOrder
  }

  export type huespedesAvgOrderByAggregateInput = {
    id_huesped?: SortOrder
    num_acomp?: SortOrder
    id_hab?: SortOrder
    id_rol?: SortOrder
  }

  export type huespedesMaxOrderByAggregateInput = {
    id_huesped?: SortOrder
    nm_huesped?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    fecha_llegada?: SortOrder
    num_acomp?: SortOrder
    correo?: SortOrder
    id_hab?: SortOrder
    passwrd?: SortOrder
    id_rol?: SortOrder
  }

  export type huespedesMinOrderByAggregateInput = {
    id_huesped?: SortOrder
    nm_huesped?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    fecha_llegada?: SortOrder
    num_acomp?: SortOrder
    correo?: SortOrder
    id_hab?: SortOrder
    passwrd?: SortOrder
    id_rol?: SortOrder
  }

  export type huespedesSumOrderByAggregateInput = {
    id_huesped?: SortOrder
    num_acomp?: SortOrder
    id_hab?: SortOrder
    id_rol?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumasuntoNullableFilter = {
    equals?: asunto | null
    in?: Enumerable<asunto> | null
    notIn?: Enumerable<asunto> | null
    not?: NestedEnumasuntoNullableFilter | asunto | null
  }

  export type incidenciasCountOrderByAggregateInput = {
    id_incidencia?: SortOrder
    descripcion?: SortOrder
    asunto?: SortOrder
  }

  export type incidenciasAvgOrderByAggregateInput = {
    id_incidencia?: SortOrder
  }

  export type incidenciasMaxOrderByAggregateInput = {
    id_incidencia?: SortOrder
    descripcion?: SortOrder
    asunto?: SortOrder
  }

  export type incidenciasMinOrderByAggregateInput = {
    id_incidencia?: SortOrder
    descripcion?: SortOrder
    asunto?: SortOrder
  }

  export type incidenciasSumOrderByAggregateInput = {
    id_incidencia?: SortOrder
  }

  export type EnumasuntoNullableWithAggregatesFilter = {
    equals?: asunto | null
    in?: Enumerable<asunto> | null
    notIn?: Enumerable<asunto> | null
    not?: NestedEnumasuntoNullableWithAggregatesFilter | asunto | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumasuntoNullableFilter
    _max?: NestedEnumasuntoNullableFilter
  }

  export type itemsCountOrderByAggregateInput = {
    id_item?: SortOrder
    nm_item?: SortOrder
    cantidad_exist?: SortOrder
  }

  export type itemsAvgOrderByAggregateInput = {
    id_item?: SortOrder
    cantidad_exist?: SortOrder
  }

  export type itemsMaxOrderByAggregateInput = {
    id_item?: SortOrder
    nm_item?: SortOrder
    cantidad_exist?: SortOrder
  }

  export type itemsMinOrderByAggregateInput = {
    id_item?: SortOrder
    nm_item?: SortOrder
    cantidad_exist?: SortOrder
  }

  export type itemsSumOrderByAggregateInput = {
    id_item?: SortOrder
    cantidad_exist?: SortOrder
  }

  export type EnumestadoNullableFilter = {
    equals?: estado | null
    in?: Enumerable<estado> | null
    notIn?: Enumerable<estado> | null
    not?: NestedEnumestadoNullableFilter | estado | null
  }

  export type Enumtipo_pedidoNullableFilter = {
    equals?: tipo_pedido | null
    in?: Enumerable<tipo_pedido> | null
    notIn?: Enumerable<tipo_pedido> | null
    not?: NestedEnumtipo_pedidoNullableFilter | tipo_pedido | null
  }

  export type pedidosCountOrderByAggregateInput = {
    id_pedido?: SortOrder
    estado?: SortOrder
    tipo_pedido?: SortOrder
  }

  export type pedidosAvgOrderByAggregateInput = {
    id_pedido?: SortOrder
  }

  export type pedidosMaxOrderByAggregateInput = {
    id_pedido?: SortOrder
    estado?: SortOrder
    tipo_pedido?: SortOrder
  }

  export type pedidosMinOrderByAggregateInput = {
    id_pedido?: SortOrder
    estado?: SortOrder
    tipo_pedido?: SortOrder
  }

  export type pedidosSumOrderByAggregateInput = {
    id_pedido?: SortOrder
  }

  export type EnumestadoNullableWithAggregatesFilter = {
    equals?: estado | null
    in?: Enumerable<estado> | null
    notIn?: Enumerable<estado> | null
    not?: NestedEnumestadoNullableWithAggregatesFilter | estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumestadoNullableFilter
    _max?: NestedEnumestadoNullableFilter
  }

  export type Enumtipo_pedidoNullableWithAggregatesFilter = {
    equals?: tipo_pedido | null
    in?: Enumerable<tipo_pedido> | null
    notIn?: Enumerable<tipo_pedido> | null
    not?: NestedEnumtipo_pedidoNullableWithAggregatesFilter | tipo_pedido | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumtipo_pedidoNullableFilter
    _max?: NestedEnumtipo_pedidoNullableFilter
  }

  export type personalCountOrderByAggregateInput = {
    id_personal?: SortOrder
    nm_prsnl?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    id_rol?: SortOrder
  }

  export type personalAvgOrderByAggregateInput = {
    id_personal?: SortOrder
    id_rol?: SortOrder
  }

  export type personalMaxOrderByAggregateInput = {
    id_personal?: SortOrder
    nm_prsnl?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    id_rol?: SortOrder
  }

  export type personalMinOrderByAggregateInput = {
    id_personal?: SortOrder
    nm_prsnl?: SortOrder
    ap_pat?: SortOrder
    ap_mat?: SortOrder
    id_rol?: SortOrder
  }

  export type personalSumOrderByAggregateInput = {
    id_personal?: SortOrder
    id_rol?: SortOrder
  }

  export type EnumrolNullableFilter = {
    equals?: rol | null
    in?: Enumerable<rol> | null
    notIn?: Enumerable<rol> | null
    not?: NestedEnumrolNullableFilter | rol | null
  }

  export type PersonalListRelationFilter = {
    every?: personalWhereInput
    some?: personalWhereInput
    none?: personalWhereInput
  }

  export type personalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rolesCountOrderByAggregateInput = {
    id_rol?: SortOrder
    rol?: SortOrder
  }

  export type rolesAvgOrderByAggregateInput = {
    id_rol?: SortOrder
  }

  export type rolesMaxOrderByAggregateInput = {
    id_rol?: SortOrder
    rol?: SortOrder
  }

  export type rolesMinOrderByAggregateInput = {
    id_rol?: SortOrder
    rol?: SortOrder
  }

  export type rolesSumOrderByAggregateInput = {
    id_rol?: SortOrder
  }

  export type EnumrolNullableWithAggregatesFilter = {
    equals?: rol | null
    in?: Enumerable<rol> | null
    notIn?: Enumerable<rol> | null
    not?: NestedEnumrolNullableWithAggregatesFilter | rol | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumrolNullableFilter
    _max?: NestedEnumrolNullableFilter
  }

  export type huespedesCreateNestedManyWithoutHabitacionesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutHabitacionesInput>, Enumerable<huespedesUncheckedCreateWithoutHabitacionesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutHabitacionesInput>
    createMany?: huespedesCreateManyHabitacionesInputEnvelope
    connect?: Enumerable<huespedesWhereUniqueInput>
  }

  export type huespedesUncheckedCreateNestedManyWithoutHabitacionesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutHabitacionesInput>, Enumerable<huespedesUncheckedCreateWithoutHabitacionesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutHabitacionesInput>
    createMany?: huespedesCreateManyHabitacionesInputEnvelope
    connect?: Enumerable<huespedesWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumtipo_habFieldUpdateOperationsInput = {
    set?: tipo_hab | null
  }

  export type huespedesUpdateManyWithoutHabitacionesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutHabitacionesInput>, Enumerable<huespedesUncheckedCreateWithoutHabitacionesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutHabitacionesInput>
    upsert?: Enumerable<huespedesUpsertWithWhereUniqueWithoutHabitacionesInput>
    createMany?: huespedesCreateManyHabitacionesInputEnvelope
    set?: Enumerable<huespedesWhereUniqueInput>
    disconnect?: Enumerable<huespedesWhereUniqueInput>
    delete?: Enumerable<huespedesWhereUniqueInput>
    connect?: Enumerable<huespedesWhereUniqueInput>
    update?: Enumerable<huespedesUpdateWithWhereUniqueWithoutHabitacionesInput>
    updateMany?: Enumerable<huespedesUpdateManyWithWhereWithoutHabitacionesInput>
    deleteMany?: Enumerable<huespedesScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type huespedesUncheckedUpdateManyWithoutHabitacionesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutHabitacionesInput>, Enumerable<huespedesUncheckedCreateWithoutHabitacionesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutHabitacionesInput>
    upsert?: Enumerable<huespedesUpsertWithWhereUniqueWithoutHabitacionesInput>
    createMany?: huespedesCreateManyHabitacionesInputEnvelope
    set?: Enumerable<huespedesWhereUniqueInput>
    disconnect?: Enumerable<huespedesWhereUniqueInput>
    delete?: Enumerable<huespedesWhereUniqueInput>
    connect?: Enumerable<huespedesWhereUniqueInput>
    update?: Enumerable<huespedesUpdateWithWhereUniqueWithoutHabitacionesInput>
    updateMany?: Enumerable<huespedesUpdateManyWithWhereWithoutHabitacionesInput>
    deleteMany?: Enumerable<huespedesScalarWhereInput>
  }

  export type habitacionesCreateNestedOneWithoutHuespedesInput = {
    create?: XOR<habitacionesCreateWithoutHuespedesInput, habitacionesUncheckedCreateWithoutHuespedesInput>
    connectOrCreate?: habitacionesCreateOrConnectWithoutHuespedesInput
    connect?: habitacionesWhereUniqueInput
  }

  export type rolesCreateNestedOneWithoutHuespedesInput = {
    create?: XOR<rolesCreateWithoutHuespedesInput, rolesUncheckedCreateWithoutHuespedesInput>
    connectOrCreate?: rolesCreateOrConnectWithoutHuespedesInput
    connect?: rolesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type habitacionesUpdateOneRequiredWithoutHuespedesInput = {
    create?: XOR<habitacionesCreateWithoutHuespedesInput, habitacionesUncheckedCreateWithoutHuespedesInput>
    connectOrCreate?: habitacionesCreateOrConnectWithoutHuespedesInput
    upsert?: habitacionesUpsertWithoutHuespedesInput
    connect?: habitacionesWhereUniqueInput
    update?: XOR<habitacionesUpdateWithoutHuespedesInput, habitacionesUncheckedUpdateWithoutHuespedesInput>
  }

  export type rolesUpdateOneWithoutHuespedesInput = {
    create?: XOR<rolesCreateWithoutHuespedesInput, rolesUncheckedCreateWithoutHuespedesInput>
    connectOrCreate?: rolesCreateOrConnectWithoutHuespedesInput
    upsert?: rolesUpsertWithoutHuespedesInput
    disconnect?: boolean
    delete?: boolean
    connect?: rolesWhereUniqueInput
    update?: XOR<rolesUpdateWithoutHuespedesInput, rolesUncheckedUpdateWithoutHuespedesInput>
  }

  export type NullableEnumasuntoFieldUpdateOperationsInput = {
    set?: asunto | null
  }

  export type NullableEnumestadoFieldUpdateOperationsInput = {
    set?: estado | null
  }

  export type NullableEnumtipo_pedidoFieldUpdateOperationsInput = {
    set?: tipo_pedido | null
  }

  export type rolesCreateNestedOneWithoutPersonalInput = {
    create?: XOR<rolesCreateWithoutPersonalInput, rolesUncheckedCreateWithoutPersonalInput>
    connectOrCreate?: rolesCreateOrConnectWithoutPersonalInput
    connect?: rolesWhereUniqueInput
  }

  export type rolesUpdateOneWithoutPersonalInput = {
    create?: XOR<rolesCreateWithoutPersonalInput, rolesUncheckedCreateWithoutPersonalInput>
    connectOrCreate?: rolesCreateOrConnectWithoutPersonalInput
    upsert?: rolesUpsertWithoutPersonalInput
    disconnect?: boolean
    delete?: boolean
    connect?: rolesWhereUniqueInput
    update?: XOR<rolesUpdateWithoutPersonalInput, rolesUncheckedUpdateWithoutPersonalInput>
  }

  export type huespedesCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutRolesInput>, Enumerable<huespedesUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutRolesInput>
    createMany?: huespedesCreateManyRolesInputEnvelope
    connect?: Enumerable<huespedesWhereUniqueInput>
  }

  export type personalCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<personalCreateWithoutRolesInput>, Enumerable<personalUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<personalCreateOrConnectWithoutRolesInput>
    createMany?: personalCreateManyRolesInputEnvelope
    connect?: Enumerable<personalWhereUniqueInput>
  }

  export type huespedesUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutRolesInput>, Enumerable<huespedesUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutRolesInput>
    createMany?: huespedesCreateManyRolesInputEnvelope
    connect?: Enumerable<huespedesWhereUniqueInput>
  }

  export type personalUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<personalCreateWithoutRolesInput>, Enumerable<personalUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<personalCreateOrConnectWithoutRolesInput>
    createMany?: personalCreateManyRolesInputEnvelope
    connect?: Enumerable<personalWhereUniqueInput>
  }

  export type NullableEnumrolFieldUpdateOperationsInput = {
    set?: rol | null
  }

  export type huespedesUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutRolesInput>, Enumerable<huespedesUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<huespedesUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: huespedesCreateManyRolesInputEnvelope
    set?: Enumerable<huespedesWhereUniqueInput>
    disconnect?: Enumerable<huespedesWhereUniqueInput>
    delete?: Enumerable<huespedesWhereUniqueInput>
    connect?: Enumerable<huespedesWhereUniqueInput>
    update?: Enumerable<huespedesUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<huespedesUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<huespedesScalarWhereInput>
  }

  export type personalUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<personalCreateWithoutRolesInput>, Enumerable<personalUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<personalCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<personalUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: personalCreateManyRolesInputEnvelope
    set?: Enumerable<personalWhereUniqueInput>
    disconnect?: Enumerable<personalWhereUniqueInput>
    delete?: Enumerable<personalWhereUniqueInput>
    connect?: Enumerable<personalWhereUniqueInput>
    update?: Enumerable<personalUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<personalUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<personalScalarWhereInput>
  }

  export type huespedesUncheckedUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<huespedesCreateWithoutRolesInput>, Enumerable<huespedesUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<huespedesCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<huespedesUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: huespedesCreateManyRolesInputEnvelope
    set?: Enumerable<huespedesWhereUniqueInput>
    disconnect?: Enumerable<huespedesWhereUniqueInput>
    delete?: Enumerable<huespedesWhereUniqueInput>
    connect?: Enumerable<huespedesWhereUniqueInput>
    update?: Enumerable<huespedesUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<huespedesUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<huespedesScalarWhereInput>
  }

  export type personalUncheckedUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<personalCreateWithoutRolesInput>, Enumerable<personalUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<personalCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<personalUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: personalCreateManyRolesInputEnvelope
    set?: Enumerable<personalWhereUniqueInput>
    disconnect?: Enumerable<personalWhereUniqueInput>
    delete?: Enumerable<personalWhereUniqueInput>
    connect?: Enumerable<personalWhereUniqueInput>
    update?: Enumerable<personalUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<personalUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<personalScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumtipo_habNullableFilter = {
    equals?: tipo_hab | null
    in?: Enumerable<tipo_hab> | null
    notIn?: Enumerable<tipo_hab> | null
    not?: NestedEnumtipo_habNullableFilter | tipo_hab | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumtipo_habNullableWithAggregatesFilter = {
    equals?: tipo_hab | null
    in?: Enumerable<tipo_hab> | null
    notIn?: Enumerable<tipo_hab> | null
    not?: NestedEnumtipo_habNullableWithAggregatesFilter | tipo_hab | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumtipo_habNullableFilter
    _max?: NestedEnumtipo_habNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumasuntoNullableFilter = {
    equals?: asunto | null
    in?: Enumerable<asunto> | null
    notIn?: Enumerable<asunto> | null
    not?: NestedEnumasuntoNullableFilter | asunto | null
  }

  export type NestedEnumasuntoNullableWithAggregatesFilter = {
    equals?: asunto | null
    in?: Enumerable<asunto> | null
    notIn?: Enumerable<asunto> | null
    not?: NestedEnumasuntoNullableWithAggregatesFilter | asunto | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumasuntoNullableFilter
    _max?: NestedEnumasuntoNullableFilter
  }

  export type NestedEnumestadoNullableFilter = {
    equals?: estado | null
    in?: Enumerable<estado> | null
    notIn?: Enumerable<estado> | null
    not?: NestedEnumestadoNullableFilter | estado | null
  }

  export type NestedEnumtipo_pedidoNullableFilter = {
    equals?: tipo_pedido | null
    in?: Enumerable<tipo_pedido> | null
    notIn?: Enumerable<tipo_pedido> | null
    not?: NestedEnumtipo_pedidoNullableFilter | tipo_pedido | null
  }

  export type NestedEnumestadoNullableWithAggregatesFilter = {
    equals?: estado | null
    in?: Enumerable<estado> | null
    notIn?: Enumerable<estado> | null
    not?: NestedEnumestadoNullableWithAggregatesFilter | estado | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumestadoNullableFilter
    _max?: NestedEnumestadoNullableFilter
  }

  export type NestedEnumtipo_pedidoNullableWithAggregatesFilter = {
    equals?: tipo_pedido | null
    in?: Enumerable<tipo_pedido> | null
    notIn?: Enumerable<tipo_pedido> | null
    not?: NestedEnumtipo_pedidoNullableWithAggregatesFilter | tipo_pedido | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumtipo_pedidoNullableFilter
    _max?: NestedEnumtipo_pedidoNullableFilter
  }

  export type NestedEnumrolNullableFilter = {
    equals?: rol | null
    in?: Enumerable<rol> | null
    notIn?: Enumerable<rol> | null
    not?: NestedEnumrolNullableFilter | rol | null
  }

  export type NestedEnumrolNullableWithAggregatesFilter = {
    equals?: rol | null
    in?: Enumerable<rol> | null
    notIn?: Enumerable<rol> | null
    not?: NestedEnumrolNullableWithAggregatesFilter | rol | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumrolNullableFilter
    _max?: NestedEnumrolNullableFilter
  }

  export type huespedesCreateWithoutHabitacionesInput = {
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    passwrd?: string | null
    roles?: rolesCreateNestedOneWithoutHuespedesInput
  }

  export type huespedesUncheckedCreateWithoutHabitacionesInput = {
    id_huesped?: number
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    passwrd?: string | null
    id_rol?: number | null
  }

  export type huespedesCreateOrConnectWithoutHabitacionesInput = {
    where: huespedesWhereUniqueInput
    create: XOR<huespedesCreateWithoutHabitacionesInput, huespedesUncheckedCreateWithoutHabitacionesInput>
  }

  export type huespedesCreateManyHabitacionesInputEnvelope = {
    data: Enumerable<huespedesCreateManyHabitacionesInput>
    skipDuplicates?: boolean
  }

  export type huespedesUpsertWithWhereUniqueWithoutHabitacionesInput = {
    where: huespedesWhereUniqueInput
    update: XOR<huespedesUpdateWithoutHabitacionesInput, huespedesUncheckedUpdateWithoutHabitacionesInput>
    create: XOR<huespedesCreateWithoutHabitacionesInput, huespedesUncheckedCreateWithoutHabitacionesInput>
  }

  export type huespedesUpdateWithWhereUniqueWithoutHabitacionesInput = {
    where: huespedesWhereUniqueInput
    data: XOR<huespedesUpdateWithoutHabitacionesInput, huespedesUncheckedUpdateWithoutHabitacionesInput>
  }

  export type huespedesUpdateManyWithWhereWithoutHabitacionesInput = {
    where: huespedesScalarWhereInput
    data: XOR<huespedesUpdateManyMutationInput, huespedesUncheckedUpdateManyWithoutHuespedesInput>
  }

  export type huespedesScalarWhereInput = {
    AND?: Enumerable<huespedesScalarWhereInput>
    OR?: Enumerable<huespedesScalarWhereInput>
    NOT?: Enumerable<huespedesScalarWhereInput>
    id_huesped?: IntFilter | number
    nm_huesped?: StringFilter | string
    ap_pat?: StringFilter | string
    ap_mat?: StringNullableFilter | string | null
    fecha_llegada?: DateTimeFilter | Date | string
    num_acomp?: IntNullableFilter | number | null
    correo?: StringFilter | string
    id_hab?: IntFilter | number
    passwrd?: StringNullableFilter | string | null
    id_rol?: IntNullableFilter | number | null
  }

  export type habitacionesCreateWithoutHuespedesInput = {
    num_hab?: number | null
    tipo_hab?: tipo_hab | null
  }

  export type habitacionesUncheckedCreateWithoutHuespedesInput = {
    id_hab?: number
    num_hab?: number | null
    tipo_hab?: tipo_hab | null
  }

  export type habitacionesCreateOrConnectWithoutHuespedesInput = {
    where: habitacionesWhereUniqueInput
    create: XOR<habitacionesCreateWithoutHuespedesInput, habitacionesUncheckedCreateWithoutHuespedesInput>
  }

  export type rolesCreateWithoutHuespedesInput = {
    rol?: rol | null
    personal?: personalCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateWithoutHuespedesInput = {
    id_rol?: number
    rol?: rol | null
    personal?: personalUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesCreateOrConnectWithoutHuespedesInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutHuespedesInput, rolesUncheckedCreateWithoutHuespedesInput>
  }

  export type habitacionesUpsertWithoutHuespedesInput = {
    update: XOR<habitacionesUpdateWithoutHuespedesInput, habitacionesUncheckedUpdateWithoutHuespedesInput>
    create: XOR<habitacionesCreateWithoutHuespedesInput, habitacionesUncheckedCreateWithoutHuespedesInput>
  }

  export type habitacionesUpdateWithoutHuespedesInput = {
    num_hab?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_hab?: NullableEnumtipo_habFieldUpdateOperationsInput | tipo_hab | null
  }

  export type habitacionesUncheckedUpdateWithoutHuespedesInput = {
    id_hab?: IntFieldUpdateOperationsInput | number
    num_hab?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_hab?: NullableEnumtipo_habFieldUpdateOperationsInput | tipo_hab | null
  }

  export type rolesUpsertWithoutHuespedesInput = {
    update: XOR<rolesUpdateWithoutHuespedesInput, rolesUncheckedUpdateWithoutHuespedesInput>
    create: XOR<rolesCreateWithoutHuespedesInput, rolesUncheckedCreateWithoutHuespedesInput>
  }

  export type rolesUpdateWithoutHuespedesInput = {
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
    personal?: personalUpdateManyWithoutRolesInput
  }

  export type rolesUncheckedUpdateWithoutHuespedesInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
    personal?: personalUncheckedUpdateManyWithoutRolesInput
  }

  export type rolesCreateWithoutPersonalInput = {
    rol?: rol | null
    huespedes?: huespedesCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateWithoutPersonalInput = {
    id_rol?: number
    rol?: rol | null
    huespedes?: huespedesUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesCreateOrConnectWithoutPersonalInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutPersonalInput, rolesUncheckedCreateWithoutPersonalInput>
  }

  export type rolesUpsertWithoutPersonalInput = {
    update: XOR<rolesUpdateWithoutPersonalInput, rolesUncheckedUpdateWithoutPersonalInput>
    create: XOR<rolesCreateWithoutPersonalInput, rolesUncheckedCreateWithoutPersonalInput>
  }

  export type rolesUpdateWithoutPersonalInput = {
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
    huespedes?: huespedesUpdateManyWithoutRolesInput
  }

  export type rolesUncheckedUpdateWithoutPersonalInput = {
    id_rol?: IntFieldUpdateOperationsInput | number
    rol?: NullableEnumrolFieldUpdateOperationsInput | rol | null
    huespedes?: huespedesUncheckedUpdateManyWithoutRolesInput
  }

  export type huespedesCreateWithoutRolesInput = {
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    passwrd?: string | null
    habitaciones: habitacionesCreateNestedOneWithoutHuespedesInput
  }

  export type huespedesUncheckedCreateWithoutRolesInput = {
    id_huesped?: number
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    id_hab: number
    passwrd?: string | null
  }

  export type huespedesCreateOrConnectWithoutRolesInput = {
    where: huespedesWhereUniqueInput
    create: XOR<huespedesCreateWithoutRolesInput, huespedesUncheckedCreateWithoutRolesInput>
  }

  export type huespedesCreateManyRolesInputEnvelope = {
    data: Enumerable<huespedesCreateManyRolesInput>
    skipDuplicates?: boolean
  }

  export type personalCreateWithoutRolesInput = {
    nm_prsnl?: string | null
    ap_pat?: string | null
    ap_mat?: string | null
  }

  export type personalUncheckedCreateWithoutRolesInput = {
    id_personal?: number
    nm_prsnl?: string | null
    ap_pat?: string | null
    ap_mat?: string | null
  }

  export type personalCreateOrConnectWithoutRolesInput = {
    where: personalWhereUniqueInput
    create: XOR<personalCreateWithoutRolesInput, personalUncheckedCreateWithoutRolesInput>
  }

  export type personalCreateManyRolesInputEnvelope = {
    data: Enumerable<personalCreateManyRolesInput>
    skipDuplicates?: boolean
  }

  export type huespedesUpsertWithWhereUniqueWithoutRolesInput = {
    where: huespedesWhereUniqueInput
    update: XOR<huespedesUpdateWithoutRolesInput, huespedesUncheckedUpdateWithoutRolesInput>
    create: XOR<huespedesCreateWithoutRolesInput, huespedesUncheckedCreateWithoutRolesInput>
  }

  export type huespedesUpdateWithWhereUniqueWithoutRolesInput = {
    where: huespedesWhereUniqueInput
    data: XOR<huespedesUpdateWithoutRolesInput, huespedesUncheckedUpdateWithoutRolesInput>
  }

  export type huespedesUpdateManyWithWhereWithoutRolesInput = {
    where: huespedesScalarWhereInput
    data: XOR<huespedesUpdateManyMutationInput, huespedesUncheckedUpdateManyWithoutHuespedesInput>
  }

  export type personalUpsertWithWhereUniqueWithoutRolesInput = {
    where: personalWhereUniqueInput
    update: XOR<personalUpdateWithoutRolesInput, personalUncheckedUpdateWithoutRolesInput>
    create: XOR<personalCreateWithoutRolesInput, personalUncheckedCreateWithoutRolesInput>
  }

  export type personalUpdateWithWhereUniqueWithoutRolesInput = {
    where: personalWhereUniqueInput
    data: XOR<personalUpdateWithoutRolesInput, personalUncheckedUpdateWithoutRolesInput>
  }

  export type personalUpdateManyWithWhereWithoutRolesInput = {
    where: personalScalarWhereInput
    data: XOR<personalUpdateManyMutationInput, personalUncheckedUpdateManyWithoutPersonalInput>
  }

  export type personalScalarWhereInput = {
    AND?: Enumerable<personalScalarWhereInput>
    OR?: Enumerable<personalScalarWhereInput>
    NOT?: Enumerable<personalScalarWhereInput>
    id_personal?: IntFilter | number
    nm_prsnl?: StringNullableFilter | string | null
    ap_pat?: StringNullableFilter | string | null
    ap_mat?: StringNullableFilter | string | null
    id_rol?: IntNullableFilter | number | null
  }

  export type huespedesCreateManyHabitacionesInput = {
    id_huesped?: number
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    passwrd?: string | null
    id_rol?: number | null
  }

  export type huespedesUpdateWithoutHabitacionesInput = {
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: rolesUpdateOneWithoutHuespedesInput
  }

  export type huespedesUncheckedUpdateWithoutHabitacionesInput = {
    id_huesped?: IntFieldUpdateOperationsInput | number
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    id_rol?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type huespedesUncheckedUpdateManyWithoutHuespedesInput = {
    id_huesped?: IntFieldUpdateOperationsInput | number
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    id_rol?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type huespedesCreateManyRolesInput = {
    id_huesped?: number
    nm_huesped: string
    ap_pat: string
    ap_mat?: string | null
    fecha_llegada: Date | string
    num_acomp?: number | null
    correo: string
    id_hab: number
    passwrd?: string | null
  }

  export type personalCreateManyRolesInput = {
    id_personal?: number
    nm_prsnl?: string | null
    ap_pat?: string | null
    ap_mat?: string | null
  }

  export type huespedesUpdateWithoutRolesInput = {
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
    habitaciones?: habitacionesUpdateOneRequiredWithoutHuespedesInput
  }

  export type huespedesUncheckedUpdateWithoutRolesInput = {
    id_huesped?: IntFieldUpdateOperationsInput | number
    nm_huesped?: StringFieldUpdateOperationsInput | string
    ap_pat?: StringFieldUpdateOperationsInput | string
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_llegada?: DateTimeFieldUpdateOperationsInput | Date | string
    num_acomp?: NullableIntFieldUpdateOperationsInput | number | null
    correo?: StringFieldUpdateOperationsInput | string
    id_hab?: IntFieldUpdateOperationsInput | number
    passwrd?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type personalUpdateWithoutRolesInput = {
    nm_prsnl?: NullableStringFieldUpdateOperationsInput | string | null
    ap_pat?: NullableStringFieldUpdateOperationsInput | string | null
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type personalUncheckedUpdateWithoutRolesInput = {
    id_personal?: IntFieldUpdateOperationsInput | number
    nm_prsnl?: NullableStringFieldUpdateOperationsInput | string | null
    ap_pat?: NullableStringFieldUpdateOperationsInput | string | null
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type personalUncheckedUpdateManyWithoutPersonalInput = {
    id_personal?: IntFieldUpdateOperationsInput | number
    nm_prsnl?: NullableStringFieldUpdateOperationsInput | string | null
    ap_pat?: NullableStringFieldUpdateOperationsInput | string | null
    ap_mat?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}